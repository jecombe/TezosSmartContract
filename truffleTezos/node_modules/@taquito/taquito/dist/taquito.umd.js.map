{"version":3,"file":"taquito.umd.js","sources":["../src/signer/noop.ts","../src/forger/rpc-forger.ts","../src/injector/rpc-injector.ts","../src/context.ts","../src/operations/operations.ts","../src/operations/delegate-operation.ts","../src/constants.ts","../src/operations/operation-errors.ts","../src/operations/operation-emitter.ts","../src/operations/origination-operation.ts","../src/operations/transaction-operation.ts","../src/contract/errors.ts","../src/contract/contract.ts","../src/format.ts","../src/contract/prepare.ts","../src/contract/big-map.ts","../src/contract/semantic.ts","../src/contract/rpc-contract-provider.ts","../src/contract/estimate.ts","../src/contract/rpc-estimate-provider.ts","../src/query/indexer-provider.ts","../src/subscribe/filters.ts","../src/subscribe/observable-subscription.ts","../src/subscribe/polling-provider.ts","../src/tz/rpc-tz-provider.ts","../src/operations/batch-operation.ts","../src/batch/rpc-batch-provider.ts","../src/contract/manager-lambda.ts","../src/forger/composite-forger.ts","../src/taquito.ts"],"sourcesContent":["import { Signer } from './interface';\n\n/**\n * @description Default signer implementation which does nothing and produce invalid signature\n */\nexport class NoopSigner implements Signer {\n  async publicKey() {\n    return '';\n  }\n  async publicKeyHash() {\n    return '';\n  }\n  async secretKey() {\n    return '';\n  }\n  async sign(bytes: string, _watermark?: Uint8Array) {\n    return {\n      bytes,\n      sig: '',\n      prefixSig: '',\n      sbytes: bytes,\n    };\n  }\n}\n","import { Forger, ForgeParams, ForgeResponse } from './interface';\nimport { Context } from '../context';\n\nexport class RpcForger implements Forger {\n  constructor(private context: Context) {}\n\n  forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    return this.context.rpc.forgeOperations({ branch, contents });\n  }\n}\n","import { Injector } from './interface';\nimport { Context } from '../context';\n\nexport class RpcInjector implements Injector {\n  constructor(private context: Context) {}\n  inject(signedOperationBytes: string): Promise<string> {\n    return this.context.rpc.injectOperation(signedOperationBytes);\n  }\n}\n","import { RpcClient } from '@taquito/rpc';\nimport { Signer } from './signer/interface';\nimport { NoopSigner } from './signer/noop';\nimport { Protocols } from './constants';\nimport { Forger } from './forger/interface';\nimport { RpcForger } from './forger/rpc-forger';\nimport { Injector } from './injector/interface';\nimport { RpcInjector } from './injector/rpc-injector';\n\nexport interface TaquitoProvider<T, K extends Array<any>> {\n  new (context: Context, ...rest: K): T;\n}\n\nexport interface Config {\n  confirmationPollingIntervalSecond?: number;\n  confirmationPollingTimeoutSecond?: number;\n  defaultConfirmationCount?: number;\n}\n\nexport const defaultConfig: Required<Config> = {\n  confirmationPollingIntervalSecond: 10,\n  defaultConfirmationCount: 1,\n  confirmationPollingTimeoutSecond: 180,\n};\n\n/**\n * @description Encapsulate common service used throughout different part of the library\n */\nexport class Context {\n  private _forger: Forger;\n  private _injector: Injector;\n\n  constructor(\n    private _rpcClient: RpcClient = new RpcClient(),\n    private _signer: Signer = new NoopSigner(),\n    private _proto?: Protocols,\n    private _config?: Partial<Config>,\n    forger?: Forger,\n    injector?: Injector\n  ) {\n    this.config = _config as any;\n    this._forger = forger ? forger : new RpcForger(this);\n    this._injector = injector ? injector : new RpcInjector(this);\n  }\n\n  get config(): Required<Config> {\n    return this._config as any;\n  }\n\n  set config(value: Required<Config>) {\n    this._config = {\n      ...defaultConfig,\n      ...value,\n    };\n  }\n\n  get rpc(): RpcClient {\n    return this._rpcClient;\n  }\n\n  set rpc(value: RpcClient) {\n    this._rpcClient = value;\n  }\n\n  get injector() {\n    return this._injector;\n  }\n\n  set injector(value: Injector) {\n    this._injector = value;\n  }\n\n  get forger() {\n    return this._forger;\n  }\n\n  set forger(value: Forger) {\n    this._forger = value;\n  }\n\n  get signer() {\n    return this._signer;\n  }\n\n  set signer(value: Signer) {\n    this._signer = value;\n  }\n\n  set proto(value: Protocols | undefined) {\n    this._proto = value;\n  }\n\n  get proto() {\n    return this._proto;\n  }\n\n  async isAnyProtocolActive(protocol: string[] = []) {\n    if (this._proto) {\n      return protocol.includes(this._proto);\n    } else {\n      const { next_protocol } = await this.rpc.getBlockMetadata();\n      return protocol.includes(next_protocol);\n    }\n  }\n\n  /**\n   * @description Create a copy of the current context. Useful when you have long running operation and you do not want a context change to affect the operation\n   */\n  clone(): Context {\n    return new Context(this.rpc, this.signer, this.proto, this.config, this.forger, this._injector);\n  }\n}\n","import { BlockResponse, OperationContentsAndResult, OperationResultStatusEnum } from '@taquito/rpc';\nimport { defer, from, ReplaySubject, timer } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  mapTo,\n  shareReplay,\n  switchMap,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { ForgedBytes } from './types';\n\ninterface PollingConfig {\n  timeout: number;\n  interval: number;\n}\n\n/**\n * @description Utility class to interact with Tezos operations\n */\nexport class Operation {\n  private _pollingConfig$ = new ReplaySubject<PollingConfig>(1);\n\n  private _currentHeadPromise: Promise<BlockResponse> | undefined = undefined;\n\n  // Caching the current head for one second\n  private currentHead$ = defer(() => {\n    if (!this._currentHeadPromise) {\n      this._currentHeadPromise = this.context.rpc.getBlock();\n      timer(1000)\n        .pipe(first())\n        .subscribe(() => {\n          this._currentHeadPromise = undefined;\n        });\n    }\n    return from(this._currentHeadPromise);\n  });\n\n  // Polling observable that emit until timeout is reached\n  private polling$ = defer(() =>\n    this._pollingConfig$.pipe(\n      tap(({ timeout, interval }) => {\n        if (timeout <= 0) {\n          throw new Error('Timeout must be more than 0');\n        }\n\n        if (interval <= 0) {\n          throw new Error('Interval must be more than 0');\n        }\n      }),\n      map(config => ({\n        ...config,\n        timeoutAt: Math.ceil(config.timeout / config.interval) + 1,\n        count: 0,\n      })),\n      switchMap(config => timer(0, config.interval * 1000).pipe(mapTo(config))),\n      tap(config => {\n        config.count++;\n        if (config.count > config.timeoutAt) {\n          throw new Error(`Confirmation polling timed out`);\n        }\n      })\n    )\n  );\n\n  // Observable that emit once operation is seen in a block\n  private confirmed$ = this.polling$.pipe(\n    switchMapTo(this.currentHead$),\n    map(head => {\n      for (let i = 3; i >= 0; i--) {\n        head.operations[i].forEach(op => {\n          if (op.hash === this.hash) {\n            this._foundAt = head.header.level;\n          }\n        });\n      }\n\n      if (head.header.level - this._foundAt >= 0) {\n        return this._foundAt;\n      }\n    }),\n    filter(x => x !== undefined),\n    first(),\n    shareReplay()\n  );\n\n  protected _foundAt = Number.POSITIVE_INFINITY;\n  get includedInBlock() {\n    return this._foundAt;\n  }\n  /**\n   *\n   * @param hash Operation hash\n   * @param raw Raw operation that was injected\n   * @param context Taquito context allowing access to rpc and signer\n   */\n  constructor(\n    public readonly hash: string,\n    public readonly raw: ForgedBytes,\n    public readonly results: OperationContentsAndResult[],\n    protected readonly context: Context\n  ) {\n    this.confirmed$.pipe(first()).subscribe();\n  }\n\n  public get status() {\n    return (\n      this.results.map(result => {\n        if (result.metadata && result.metadata.operation_result) {\n          return result.metadata.operation_result.status as OperationResultStatusEnum;\n        } else {\n          return 'unknown';\n        }\n      })[0] || 'unknown'\n    );\n  }\n\n  /**\n   *\n   * @param confirmations [0] Number of confirmation to wait for\n   * @param interval [10] Polling interval\n   * @param timeout [180] Timeout\n   */\n  confirmation(confirmations?: number, interval?: number, timeout?: number) {\n    if (typeof confirmations !== 'undefined' && confirmations < 1) {\n      throw new Error('Confirmation count must be at least 1');\n    }\n\n    const {\n      defaultConfirmationCount,\n      confirmationPollingIntervalSecond,\n      confirmationPollingTimeoutSecond,\n    } = this.context.config;\n    this._pollingConfig$.next({\n      interval: interval || confirmationPollingIntervalSecond,\n      timeout: timeout || confirmationPollingTimeoutSecond,\n    } as Required<PollingConfig>);\n\n    const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n\n    return new Promise<number>((resolve, reject) => {\n      this.confirmed$\n        .pipe(\n          switchMap(() => this.polling$),\n          switchMap(() => this.currentHead$),\n          filter(head => head.header.level - this._foundAt >= conf - 1),\n          first()\n        )\n        .subscribe(_ => {\n          resolve(this._foundAt + (conf - 1));\n        }, reject);\n    });\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultDelegation } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCDelegateOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Delegation operation provide utility function to fetch newly issued delegation\n *\n * @warn Currently support only one delegation per operation\n */\nexport class DelegateOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCDelegateOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const delegationOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'delegation') as OperationContentsAndResultDelegation);\n    const result = delegationOp && delegationOp.metadata && delegationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get delegate(): string {\n    return this.delegate;\n  }\n\n  get isRegisterOperation(): boolean {\n    return this.delegate === this.source;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n}\n","export enum DEFAULT_GAS_LIMIT {\n  DELEGATION = 10600,\n  ORIGINATION = 10600,\n  TRANSFER = 10600,\n  REVEAL = 10600,\n}\nexport enum DEFAULT_FEE {\n  DELEGATION = 1257,\n  ORIGINATION = 10000,\n  TRANSFER = 10000,\n  REVEAL = 1420,\n}\nexport enum DEFAULT_STORAGE_LIMIT {\n  DELEGATION = 0,\n  ORIGINATION = 257,\n  TRANSFER = 257,\n  REVEAL = 0,\n}\n\nexport enum Protocols {\n  Pt24m4xi = 'Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd',\n  PsBABY5H = 'PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU',\n  PsBabyM1 = 'PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS',\n  PsCARTHA = 'PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb',\n}\n\nexport const protocols = {\n  '004': [Protocols.Pt24m4xi],\n  '005': [Protocols.PsBABY5H, Protocols.PsBabyM1],\n  '006': [Protocols.PsCARTHA],\n};\n","import {\n  MichelsonV1ExpressionBase,\n  PreapplyResponse,\n  TezosGenericOperationError,\n} from '@taquito/rpc';\n\nexport interface TezosOperationErrorWithMessage extends TezosGenericOperationError {\n  with: MichelsonV1ExpressionBase;\n}\n\nconst isErrorWithMessage = (error: any): error is TezosOperationErrorWithMessage => {\n  return 'with' in error;\n};\n\nexport class TezosOperationError implements Error {\n  name: string = 'TezosOperationError';\n  id: string;\n  kind: string;\n  message: string;\n\n  constructor(public errors: TezosGenericOperationError[]) {\n    // Last error is 'often' the one with more detail\n    const lastError = errors[errors.length - 1];\n\n    this.id = lastError.id;\n    this.kind = lastError.kind;\n\n    this.message = `(${this.kind}) ${this.id}`;\n\n    if (isErrorWithMessage(lastError) && lastError.with.string) {\n      this.message = lastError.with.string;\n    }\n  }\n}\n\nexport class TezosPreapplyFailureError implements Error {\n  name: string = 'TezosPreapplyFailureError';\n  message: string = 'Preapply returned an unexpected result';\n\n  constructor(public result: any) {}\n}\n\nexport const flattenOperationResult = (response: PreapplyResponse | PreapplyResponse[]) => {\n  let results = Array.isArray(response) ? response : [response];\n\n  let returnedResults: any[] = [];\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n      if ('metadata' in content && typeof content.metadata.operation_result !== 'undefined') {\n        returnedResults.push(content.metadata.operation_result);\n\n        if (Array.isArray(content.metadata.internal_operation_results)) {\n          content.metadata.internal_operation_results.forEach((x: any) =>\n            returnedResults.push(x.result)\n          );\n        }\n      }\n    }\n  }\n\n  return returnedResults;\n};\n\n/***\n * @description Flatten all error from preapply response (including internal error)\n */\nexport const flattenErrors = (\n  response: PreapplyResponse | PreapplyResponse[],\n  status = 'failed'\n) => {\n  let results = Array.isArray(response) ? response : [response];\n\n  let errors: TezosGenericOperationError[] = [];\n  // Transaction that do not fail will be backtracked in case one failure occur\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n      if ('metadata' in content) {\n        if (\n          typeof content.metadata.operation_result !== 'undefined' &&\n          content.metadata.operation_result.status === status\n        ) {\n          errors = errors.concat(content.metadata.operation_result.errors || []);\n        }\n        if (Array.isArray(content.metadata.internal_operation_results)) {\n          for (const internalResult of content.metadata.internal_operation_results) {\n            if ('result' in internalResult && internalResult.result.status === status) {\n              errors = errors.concat(internalResult.result.errors || []);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n","import {\n  BlockHeaderResponse,\n  ConstructedOperation,\n  ManagerKeyResponse,\n  OperationContentsAndResult,\n  RpcClient,\n  RPCRunOperationParam,\n} from '@taquito/rpc';\nimport { DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_STORAGE_LIMIT, Protocols } from '../constants';\nimport { Context } from '../context';\nimport { flattenErrors, TezosOperationError, TezosPreapplyFailureError } from './operation-errors';\nimport {\n  ForgedBytes,\n  PrepareOperationParams,\n  RPCDelegateOperation,\n  RPCOperation,\n  RPCOriginationOperation,\n  RPCRevealOperation,\n  RPCTransferOperation,\n} from './types';\nimport { Estimate } from '../contract/estimate';\n\nexport interface PreparedOperation {\n  opOb: {\n    branch: string;\n    contents: ConstructedOperation[];\n    protocol: string;\n  };\n  counter: number;\n}\n\nexport abstract class OperationEmitter {\n  get rpc(): RpcClient {\n    return this.context.rpc;\n  }\n\n  get signer() {\n    return this.context.signer;\n  }\n\n  constructor(protected context: Context) {}\n\n  private isSourceOp(\n    op: RPCOperation\n  ): op is (RPCTransferOperation | RPCOriginationOperation | RPCDelegateOperation) & {\n    source?: string;\n  } {\n    return ['transaction', 'origination', 'delegation'].includes(op.kind);\n  }\n\n  private isFeeOp(\n    op: RPCOperation\n  ): op is (\n    | RPCTransferOperation\n    | RPCOriginationOperation\n    | RPCDelegateOperation\n    | RPCRevealOperation\n  ) & { source?: string } {\n    return ['reveal', 'transaction', 'origination', 'delegation'].includes(op.kind);\n  }\n\n  // Originally from sotez (Copyright (c) 2018 Andrew Kishino)\n  protected async prepareOperation({\n    operation,\n    source,\n  }: PrepareOperationParams): Promise<PreparedOperation> {\n    let counter;\n    const counters: { [key: string]: number } = {};\n    let requiresReveal = false;\n    let ops: RPCOperation[] = [];\n    let head: BlockHeaderResponse;\n\n    const blockHeaderPromise = this.rpc.getBlockHeader();\n    const blockMetaPromise = this.rpc.getBlockMetadata();\n\n    if (Array.isArray(operation)) {\n      ops = [...operation];\n    } else {\n      ops = [operation];\n    }\n\n    // Implicit account who emit the operation\n    const publicKeyHash = await this.signer.publicKeyHash();\n\n    let counterPromise: Promise<string | undefined> = Promise.resolve(undefined);\n    let managerPromise: Promise<ManagerKeyResponse | undefined> = Promise.resolve(undefined);\n    for (let i = 0; i < ops.length; i++) {\n      if (['transaction', 'origination', 'delegation'].includes(ops[i].kind)) {\n        requiresReveal = true;\n        const { counter } = await this.rpc.getContract(publicKeyHash);\n        counterPromise = Promise.resolve(counter);\n        managerPromise = this.rpc.getManagerKey(publicKeyHash);\n        break;\n      }\n    }\n\n    const [header, metadata, headCounter, manager] = await Promise.all([\n      blockHeaderPromise,\n      blockMetaPromise,\n      counterPromise,\n      managerPromise,\n    ]);\n\n    if (!header) {\n      throw new Error('Unable to latest block header');\n    }\n\n    if (!metadata) {\n      throw new Error('Unable to fetch latest metadata');\n    }\n\n    head = header;\n\n    if (requiresReveal) {\n      const haveManager = manager && typeof manager === 'object' ? !!manager.key : !!manager;\n      if (!haveManager) {\n        const reveal: RPCRevealOperation = {\n          kind: 'reveal',\n          fee: DEFAULT_FEE.REVEAL,\n          public_key: await this.signer.publicKey(),\n          source: publicKeyHash,\n          gas_limit: DEFAULT_GAS_LIMIT.REVEAL,\n          storage_limit: DEFAULT_STORAGE_LIMIT.REVEAL,\n        };\n\n        ops.unshift(reveal);\n      }\n    }\n\n    counter = parseInt(headCounter || '0', 10);\n    if (!counters[publicKeyHash] || counters[publicKeyHash] < counter) {\n      counters[publicKeyHash] = counter;\n    }\n\n    const constructOps = (cOps: RPCOperation[]): ConstructedOperation[] =>\n      // tslint:disable strict-type-predicates\n      cOps.map((op: RPCOperation) => {\n        const constructedOp = { ...op } as ConstructedOperation;\n        if (this.isSourceOp(op)) {\n          if (typeof op.source === 'undefined') {\n            constructedOp.source = source || publicKeyHash;\n          }\n        }\n        if (this.isFeeOp(op)) {\n          if (typeof op.fee === 'undefined') {\n            constructedOp.fee = '0';\n          } else {\n            constructedOp.fee = `${op.fee}`;\n          }\n          if (typeof op.gas_limit === 'undefined') {\n            constructedOp.gas_limit = '0';\n          } else {\n            constructedOp.gas_limit = `${op.gas_limit}`;\n          }\n          if (typeof op.storage_limit === 'undefined') {\n            constructedOp.storage_limit = '0';\n          } else {\n            constructedOp.storage_limit = `${op.storage_limit}`;\n          }\n          const opCounter = ++counters[publicKeyHash];\n          constructedOp.counter = `${opCounter}`;\n        }\n        if (op.kind === 'origination') {\n          if (typeof op.balance !== 'undefined') constructedOp.balance = `${constructedOp.balance}`;\n        }\n\n        if (op.kind === 'transaction') {\n          if (constructedOp.source.toLowerCase().startsWith('kt1')) {\n            throw new Error(\n              `KT1 addresses are not supported as source since ${Protocols.PsBabyM1}`\n            );\n          }\n\n          if (typeof op.amount !== 'undefined') constructedOp.amount = `${constructedOp.amount}`;\n        }\n        // tslint:enable strict-type-predicates\n\n        return constructedOp;\n      });\n\n    const branch = head.hash;\n    const contents = constructOps(ops);\n    const protocol = metadata.next_protocol;\n\n    return {\n      opOb: {\n        branch,\n        contents,\n        protocol,\n      },\n      counter,\n    };\n  }\n\n  protected async prepareAndForge(params: PrepareOperationParams) {\n    const prepared = await this.prepareOperation(params);\n    return this.forge(prepared);\n  }\n\n  protected async forge({ opOb: { branch, contents, protocol }, counter }: PreparedOperation) {\n    let forgedBytes = await this.context.forger.forge({ branch, contents });\n\n    return {\n      opbytes: forgedBytes,\n      opOb: {\n        branch,\n        contents,\n        protocol,\n      },\n      counter,\n    };\n  }\n\n  protected async simulate(op: RPCRunOperationParam) {\n    return {\n      opResponse: await this.rpc.runOperation(op),\n      op,\n      context: this.context.clone(),\n    };\n  }\n\n  protected async estimate<T extends { fee?: number; gasLimit?: number; storageLimit?: number }>(\n    { fee, gasLimit, storageLimit, ...rest }: T,\n    estimator: (param: T) => Promise<Estimate>\n  ) {\n    let calculatedFee = fee;\n    let calculatedGas = gasLimit;\n    let calculatedStorage = storageLimit;\n\n    if (fee === undefined || gasLimit === undefined || storageLimit === undefined) {\n      const estimation = await estimator({ fee, gasLimit, storageLimit, ...(rest as any) });\n\n      if (calculatedFee === undefined) {\n        calculatedFee = estimation.suggestedFeeMutez;\n      }\n\n      if (calculatedGas === undefined) {\n        calculatedGas = estimation.gasLimit;\n      }\n\n      if (calculatedStorage === undefined) {\n        calculatedStorage = estimation.storageLimit;\n      }\n    }\n\n    return {\n      fee: calculatedFee!,\n      gasLimit: calculatedGas!,\n      storageLimit: calculatedStorage!,\n    };\n  }\n\n  protected async signAndInject(forgedBytes: ForgedBytes) {\n    const signed = await this.signer.sign(forgedBytes.opbytes, new Uint8Array([3]));\n    forgedBytes.opbytes = signed.sbytes;\n    forgedBytes.opOb.signature = signed.prefixSig;\n\n    const opResponse: OperationContentsAndResult[] = [];\n    const results = await this.rpc.preapplyOperations([forgedBytes.opOb]);\n\n    if (!Array.isArray(results)) {\n      throw new TezosPreapplyFailureError(results);\n    }\n\n    for (let i = 0; i < results.length; i++) {\n      for (let j = 0; j < results[i].contents.length; j++) {\n        opResponse.push(results[i].contents[j]);\n      }\n    }\n\n    const errors = flattenErrors(results);\n\n    if (errors.length) {\n      // @ts-ignore\n      throw new TezosOperationError(errors);\n    }\n\n    return {\n      hash: await this.context.injector.inject(forgedBytes.opbytes),\n      forgedBytes,\n      opResponse,\n      context: this.context.clone(),\n    };\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultOrigination } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { RpcContractProvider } from '../contract/rpc-contract-provider';\nimport { Operation } from './operations';\nimport {\n  ForgedBytes,\n  GasConsumingOperation,\n  StorageConsumingOperation,\n  RPCOriginationOperation,\n  FeeConsumingOperation,\n} from './types';\n\n/**\n * @description Origination operation provide utility function to fetch newly originated contract\n *\n * @warn Currently support only one origination per operation\n */\nexport class OriginationOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  /**\n   * @description Contract address of the newly originated contract\n   */\n  public readonly contractAddress?: string;\n\n  constructor(\n    hash: string,\n    private readonly params: RPCOriginationOperation,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context,\n    private contractProvider: RpcContractProvider\n  ) {\n    super(hash, raw, results, context);\n\n    const originatedContracts = this.operationResults && this.operationResults.originated_contracts;\n    if (Array.isArray(originatedContracts)) {\n      this.contractAddress = originatedContracts[0];\n    }\n  }\n\n  get operationResults() {\n    const originationOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'origination') as OperationContentsAndResultOrigination);\n    const result =\n      originationOp && originationOp.metadata && originationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get storageDiff() {\n    const storageDiff = this.operationResults && this.operationResults.paid_storage_size_diff;\n    return storageDiff ? storageDiff : undefined;\n  }\n\n  get storageSize() {\n    const storageSize = this.operationResults && this.operationResults.storage_size;\n    return storageSize ? storageSize : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n\n  /**\n   * @description Provide the contract abstract of the newly originated contract\n   */\n  async contract(confirmations?: number, interval?: number, timeout?: number) {\n    if (!this.contractAddress) {\n      throw new Error('No contract was originated in this operation');\n    }\n\n    await this.confirmation(confirmations, interval, timeout);\n    return this.contractProvider.at(this.contractAddress);\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultTransaction } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCTransferOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Transaction operation provide utility function to fetch newly issued transaction\n *\n * @warn Currently support only one transaction per operation\n */\nexport class TransactionOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCTransferOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const transactionOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'transaction') as OperationContentsAndResultTransaction);\n    return transactionOp ? [transactionOp] : [];\n  }\n\n  get amount() {\n    return new BigNumber(this.params.amount);\n  }\n\n  get destination() {\n    return this.params.destination;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_gas')\n    );\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(\n        flattenOperationResult({ contents: this.operationResults }),\n        'paid_storage_size_diff'\n      )\n    );\n  }\n\n  get storageSize() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.operationResults });\n  }\n}\n","export class InvalidParameterError implements Error {\n  name: string = 'Invalid parameters error';\n  message: string;\n  constructor(public smartContractMethodName: string, public sigs: any[], public args: any[]) {\n    this.message = `${smartContractMethodName} Received ${\n      args.length\n    } arguments while expecting on of the follow signatures (${JSON.stringify(sigs)})`;\n  }\n}\n\nexport class InvalidDelegationSource implements Error {\n  name: string = 'Invalid delegation source error';\n  message: string;\n\n  constructor(public source: string) {\n    this.message = `Since Babylon delegation source can no longer be a contract address ${source}. Please use the smart contract abstraction to set your delegate.`;\n  }\n}\n","import { ParameterSchema, Schema } from '@taquito/michelson-encoder';\nimport { EntrypointsResponse, ScriptResponse } from '@taquito/rpc';\nimport { ContractProvider } from './interface';\nimport { InvalidParameterError } from './errors';\nimport { TransferParams } from '../operations/types';\n\ninterface SendParams {\n  fee?: number;\n  storageLimit?: number;\n  gasLimit?: number;\n  amount?: number;\n}\n\nconst DEFAULT_SMART_CONTRACT_METHOD_NAME = 'main';\n\n/**\n * @description Utility class to send smart contract operation\n */\nexport class ContractMethod {\n  constructor(\n    private provider: ContractProvider,\n    private address: string,\n    private parameterSchema: ParameterSchema,\n    private name: string,\n    private args: any[],\n    private isMultipleEntrypoint = true,\n    private isAnonymous = false\n  ) {}\n\n  /**\n   * @description Get the schema of the smart contract method\n   */\n  get schema() {\n    return this.isAnonymous\n      ? this.parameterSchema.ExtractSchema()[this.name]\n      : this.parameterSchema.ExtractSchema();\n  }\n\n  /**\n   *\n   * @description Send the smart contract operation\n   *\n   * @param Options generic operation parameter\n   */\n  send(params: Partial<SendParams> = {}) {\n    return this.provider.transfer(this.toTransferParams(params));\n  }\n\n  toTransferParams({\n    fee,\n    gasLimit,\n    storageLimit,\n    amount = 0,\n  }: Partial<SendParams> = {}): TransferParams {\n    return {\n      to: this.address,\n      amount,\n      fee,\n      gasLimit,\n      storageLimit,\n      parameter: {\n        entrypoint: this.isMultipleEntrypoint ? this.name : 'default',\n        value: this.isAnonymous\n          ? this.parameterSchema.Encode(this.name, ...this.args)\n          : this.parameterSchema.Encode(...this.args),\n      } as any,\n      rawParam: true,\n    };\n  }\n}\n\nconst validateArgs = (args: any[], schema: ParameterSchema, name: string) => {\n  const sigs = schema.ExtractSignatures();\n\n  if (!sigs.find((x: any[]) => x.length === args.length)) {\n    throw new InvalidParameterError(name, sigs, args);\n  }\n};\n\n/**\n * @description Smart contract abstraction\n */\nexport class Contract {\n  /**\n   * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\n   * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\n   *\n   */\n  public methods: { [key: string]: (...args: any[]) => ContractMethod } = {};\n\n  public readonly schema: Schema;\n\n  public readonly parameterSchema: ParameterSchema;\n\n  constructor(\n    public readonly address: string,\n    public readonly script: ScriptResponse,\n    private provider: ContractProvider,\n    private entrypoints: EntrypointsResponse\n  ) {\n    this.schema = Schema.fromRPCResponse({ script: this.script });\n    this.parameterSchema = ParameterSchema.fromRPCResponse({ script: this.script });\n    this._initializeMethods(address, provider, this.entrypoints.entrypoints);\n  }\n\n  private _initializeMethods(\n    address: string,\n    provider: ContractProvider,\n    entrypoints: {\n      [key: string]: object;\n    }\n  ) {\n    const parameterSchema = this.parameterSchema;\n    const keys = Object.keys(entrypoints);\n    if (parameterSchema.isMultipleEntryPoint) {\n      keys.forEach(smartContractMethodName => {\n        const method = function(...args: any[]) {\n          const smartContractMethodSchema = new ParameterSchema(\n            entrypoints[smartContractMethodName]\n          );\n\n          validateArgs(args, smartContractMethodSchema, smartContractMethodName);\n\n          return new ContractMethod(\n            provider,\n            address,\n            smartContractMethodSchema,\n            smartContractMethodName,\n            args\n          );\n        };\n        this.methods[smartContractMethodName] = method;\n      });\n\n      // Deal with methods with no annotations which were not discovered by the RPC endpoint\n      // Methods with no annotations are discovered using parameter schema\n      const anonymousMethods = Object.keys(parameterSchema.ExtractSchema()).filter(\n        key => Object.keys(entrypoints).indexOf(key) === -1\n      );\n\n      anonymousMethods.forEach(smartContractMethodName => {\n        const method = function(...args: any[]) {\n          validateArgs(\n            [smartContractMethodName, ...args],\n            parameterSchema,\n            smartContractMethodName\n          );\n          return new ContractMethod(\n            provider,\n            address,\n            parameterSchema,\n            smartContractMethodName,\n            args,\n            false,\n            true\n          );\n        };\n        this.methods[smartContractMethodName] = method;\n      });\n    } else {\n      const smartContractMethodSchema = this.parameterSchema;\n      const method = function(...args: any[]) {\n        validateArgs(args, parameterSchema, DEFAULT_SMART_CONTRACT_METHOD_NAME);\n        return new ContractMethod(\n          provider,\n          address,\n          smartContractMethodSchema,\n          DEFAULT_SMART_CONTRACT_METHOD_NAME,\n          args,\n          false\n        );\n      };\n      this.methods[DEFAULT_SMART_CONTRACT_METHOD_NAME] = method;\n    }\n  }\n\n  /**\n   * @description Return a friendly representation of the smart contract storage\n   */\n  public storage<T>() {\n    return this.provider.getStorage<T>(this.address, this.schema);\n  }\n\n  /**\n   *\n   * @description Return a friendly representation of the smart contract big map value\n   *\n   * @param key BigMap key to fetch\n   */\n  public bigMap(key: string) {\n    // tslint:disable-next-line: deprecation\n    return this.provider.getBigMapKey(this.address, key, this.schema);\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nconst TZ_DECIMALS = 6;\nconst MTZ_DECIMALS = 3;\n\ntype Format = 'tz' | 'mtz' | 'mutez';\n\nfunction getDecimal(format: Format) {\n  switch (format) {\n    case 'tz':\n      return TZ_DECIMALS;\n    case 'mtz':\n      return MTZ_DECIMALS;\n    case 'mutez':\n    default:\n      return 0;\n  }\n}\n\nexport function format(\n  from: Format = 'mutez',\n  to: Format = 'mutez',\n  amount: number | string | BigNumber\n) {\n  const bigNum = new BigNumber(amount);\n  if (bigNum.isNaN()) {\n    return amount;\n  }\n\n  return bigNum\n    .multipliedBy(Math.pow(10, getDecimal(from)))\n    .dividedBy(Math.pow(10, getDecimal(to)));\n}\n","import {\n  OriginateParams,\n  RPCOriginationOperation,\n  TransferParams,\n  RPCTransferOperation,\n  DelegateParams,\n  RPCDelegateOperation,\n  RegisterDelegateParams,\n} from '../operations/types';\nimport { DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_STORAGE_LIMIT } from '../constants';\nimport { ml2mic, sexp2mic } from '@taquito/utils';\nimport { Schema } from '@taquito/michelson-encoder';\nimport { format } from '../format';\n\nexport const createOriginationOperation = async ({\n  code,\n  init,\n  balance = '0',\n  delegate,\n  storage,\n  fee = DEFAULT_FEE.ORIGINATION,\n  gasLimit = DEFAULT_GAS_LIMIT.ORIGINATION,\n  storageLimit = DEFAULT_STORAGE_LIMIT.ORIGINATION,\n}: OriginateParams) => {\n  // tslint:disable-next-line: strict-type-predicates\n  if (storage !== undefined && init !== undefined) {\n    throw new Error(\n      'Storage and Init cannot be set a the same time. Please either use storage or init but not both.'\n    );\n  }\n\n  const contractCode = Array.isArray(code) ? code : ml2mic(code);\n\n  let contractStorage: object;\n  if (storage !== undefined) {\n    const schema = new Schema(contractCode[1].args[0]);\n    contractStorage = schema.Encode(storage);\n  } else {\n    contractStorage = typeof init === 'string' ? sexp2mic(init) : init;\n  }\n\n  const script = {\n    code: Array.isArray(code) ? code : ml2mic(code),\n    storage: contractStorage,\n  };\n\n  const operation: RPCOriginationOperation = {\n    kind: 'origination',\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    balance: format('tz', 'mutez', balance).toString(),\n    script,\n  };\n\n  if (delegate) {\n    operation.delegate = delegate;\n  }\n  return operation;\n};\n\nexport const createTransferOperation = async ({\n  to,\n  amount,\n  parameter,\n  fee = DEFAULT_FEE.TRANSFER,\n  gasLimit = DEFAULT_GAS_LIMIT.TRANSFER,\n  storageLimit = DEFAULT_STORAGE_LIMIT.TRANSFER,\n  mutez = false,\n  rawParam = false,\n}: TransferParams) => {\n  const operation: RPCTransferOperation = {\n    kind: 'transaction',\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    amount: mutez ? amount.toString() : format('tz', 'mutez', amount).toString(),\n    destination: to,\n  };\n\n  if (parameter) {\n    operation.parameters = rawParam\n      ? parameter\n      : typeof parameter === 'string'\n      ? sexp2mic(parameter)\n      : parameter;\n  }\n  return operation;\n};\n\nexport const createSetDelegateOperation = async ({\n  delegate,\n  source,\n  fee = DEFAULT_FEE.DELEGATION,\n  gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n  storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION,\n}: DelegateParams) => {\n  const operation: RPCDelegateOperation = {\n    kind: 'delegation',\n    source,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    delegate,\n  };\n  return operation;\n};\n\nexport const createRegisterDelegateOperation = async (\n  {\n    fee = DEFAULT_FEE.DELEGATION,\n    gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n    storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION,\n  }: RegisterDelegateParams,\n  source: string\n) => {\n  return {\n    kind: 'delegation',\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    delegate: source,\n  } as RPCDelegateOperation;\n};\n","import { Schema } from '@taquito/michelson-encoder';\nimport BigNumber from 'bignumber.js';\nimport { ContractProvider } from './interface';\n\nexport class BigMapAbstraction {\n  constructor(private id: BigNumber, private schema: Schema, private provider: ContractProvider) {}\n\n  async get(keyToEncode: string) {\n    return this.provider.getBigMapKeyByID(this.id.toString(), keyToEncode, this.schema);\n  }\n\n  toJSON() {\n    return this.id.toString();\n  }\n\n  toString() {\n    return this.id.toString();\n  }\n}\n","import { Schema, Semantic } from '@taquito/michelson-encoder';\nimport { BigMapAbstraction } from './big-map';\nimport { ContractProvider } from './interface';\nimport BigNumber from 'bignumber.js';\nimport { MichelsonV1Expression } from '@taquito/rpc';\n\n// Override the default michelson encoder semantic to provide richer abstraction over storage properties\nexport const smartContractAbstractionSemantic: (p: ContractProvider) => Semantic = (\n  provider: ContractProvider\n) => ({\n  // Provide a specific abstraction for BigMaps\n  big_map: (val: MichelsonV1Expression, code: MichelsonV1Expression) => {\n    if (!val || !('int' in val) || val.int === undefined) {\n      // Return an empty object in case of missing big map ID\n      return {};\n    } else {\n      const schema = new Schema(code);\n      return new BigMapAbstraction(new BigNumber(val.int), schema, provider);\n    }\n  },\n  /*\n  // TODO: embed useful other abstractions\n  'contract':  () => {},\n  'address':  () => {}\n  */\n});\n","import { Schema } from '@taquito/michelson-encoder';\nimport { ScriptResponse } from '@taquito/rpc';\nimport { encodeExpr } from '@taquito/utils';\nimport { Context } from '../context';\nimport { DelegateOperation } from '../operations/delegate-operation';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport { OriginationOperation } from '../operations/origination-operation';\nimport { TransactionOperation } from '../operations/transaction-operation';\nimport {\n  DelegateParams,\n  OriginateParams,\n  RegisterDelegateParams,\n  TransferParams,\n} from '../operations/types';\nimport { Contract } from './contract';\nimport { InvalidDelegationSource } from './errors';\nimport { ContractProvider, ContractSchema, EstimationProvider } from './interface';\nimport {\n  createOriginationOperation,\n  createRegisterDelegateOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n} from './prepare';\nimport { smartContractAbstractionSemantic } from './semantic';\n\nexport class RpcContractProvider extends OperationEmitter implements ContractProvider {\n  constructor(context: Context, private estimator: EstimationProvider) {\n    super(context);\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of the contract storage\n   *\n   * @param contract contract address you want to get the storage from\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n   *\n   * @see http://tezos.gitlab.io/master/api/rpc.html#get-block-id-context-contracts-contract-id-script\n   */\n  async getStorage<T>(contract: string, schema?: ContractSchema): Promise<T> {\n    if (!schema) {\n      schema = await this.rpc.getScript(contract);\n    }\n\n    let contractSchema: Schema;\n    if (schema instanceof Schema) {\n      contractSchema = schema;\n    } else {\n      contractSchema = Schema.fromRPCResponse({ script: schema as ScriptResponse });\n    }\n\n    const storage = await this.rpc.getStorage(contract);\n\n    return contractSchema.Execute(storage, smartContractAbstractionSemantic(this)) as T; // Cast into T because only the caller can know the true type of the storage\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of the contract big map storage\n   *\n   * @param contract contract address you want to get the storage from\n   * @param key contract big map key to fetch value from\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n   *\n   * @deprecated Deprecated in favor of getBigMapKeyByID\n   *\n   * @see http://tezos.gitlab.io/master/api/rpc.html#get-block-id-context-contracts-contract-id-script\n   */\n  async getBigMapKey<T>(contract: string, key: string, schema?: ContractSchema): Promise<T> {\n    if (!schema) {\n      schema = await this.rpc.getScript(contract);\n    }\n\n    let contractSchema: Schema;\n    if (schema instanceof Schema) {\n      contractSchema = schema;\n    } else {\n      contractSchema = Schema.fromRPCResponse({ script: schema as ScriptResponse });\n    }\n\n    const encodedKey = contractSchema.EncodeBigMapKey(key);\n\n    const val = await this.rpc.getBigMapKey(contract, encodedKey);\n\n    return contractSchema.ExecuteOnBigMapValue(val) as T; // Cast into T because only the caller can know the true type of the storage\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of a big map value\n   *\n   * @param id Big Map ID\n   * @param keyToEncode key to query (will be encoded properly according to the schema)\n   * @param schema Big Map schema (can be determined using your contract type)\n   *\n   * @see http://tezos.gitlab.io/mainnet/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n   */\n  async getBigMapKeyByID<T>(id: string, keyToEncode: string, schema: Schema): Promise<T> {\n    const { key, type } = schema.EncodeBigMapKey(keyToEncode);\n    const { packed } = await this.context.rpc.packData({ data: key, type });\n\n    const encodedExpr = encodeExpr(packed);\n\n    const bigMapValue = await this.context.rpc.getBigMapExpr(id.toString(), encodedExpr);\n\n    return schema.ExecuteOnBigMapValue(bigMapValue, smartContractAbstractionSemantic(this)) as T;\n  }\n\n  /**\n   *\n   * @description Originate a new contract according to the script in parameters. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @warn You cannot specify storage and init at the same time (use init to pass the raw michelson representation of storage)\n   *\n   * @param OriginationOperation Originate operation parameter\n   */\n  async originate(params: OriginateParams) {\n    const estimate = await this.estimate(params, this.estimator.originate.bind(this.estimator));\n\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const operation = await createOriginationOperation({\n      ...params,\n      ...estimate,\n    });\n    const preparedOrigination = await this.prepareOperation({ operation, source: publicKeyHash });\n    const forgedOrigination = await this.forge(preparedOrigination);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(forgedOrigination);\n    return new OriginationOperation(hash, operation, forgedBytes, opResponse, context, this);\n  }\n\n  /**\n   *\n   * @description Set the delegate for a contract. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param SetDelegate operation parameter\n   */\n  async setDelegate(params: DelegateParams) {\n    // Since babylon delegation source cannot smart contract\n    if (/kt1/i.test(params.source)) {\n      throw new InvalidDelegationSource(params.source);\n    }\n\n    const estimate = await this.estimate(params, this.estimator.setDelegate.bind(this.estimator));\n    const operation = await createSetDelegateOperation({ ...params, ...estimate });\n    const sourceOrDefault = params.source || (await this.signer.publicKeyHash());\n    const opBytes = await this.prepareAndForge({\n      operation,\n      source: sourceOrDefault,\n    });\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new DelegateOperation(\n      hash,\n      operation,\n      sourceOrDefault,\n      forgedBytes,\n      opResponse,\n      context\n    );\n  }\n\n  /**\n   *\n   * @description Register the current address as delegate. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param RegisterDelegate operation parameter\n   */\n  async registerDelegate(params: RegisterDelegateParams) {\n    const estimate = await this.estimate(\n      params,\n      this.estimator.registerDelegate.bind(this.estimator)\n    );\n    const source = await this.signer.publicKeyHash();\n    const operation = await createRegisterDelegateOperation({ ...params, ...estimate }, source);\n    const opBytes = await this.prepareAndForge({ operation });\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new DelegateOperation(hash, operation, source, forgedBytes, opResponse, context);\n  }\n\n  /**\n   *\n   * @description Transfer tz from current address to a specific address. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param Transfer operation parameter\n   */\n  async transfer(params: TransferParams) {\n    const estimate = await this.estimate(params, this.estimator.transfer.bind(this.estimator));\n    const operation = await createTransferOperation({\n      ...params,\n      ...estimate,\n    });\n    const source = params.source || (await this.signer.publicKeyHash());\n    const opBytes = await this.prepareAndForge({ operation, source: params.source });\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new TransactionOperation(hash, operation, source, forgedBytes, opResponse, context);\n  }\n\n  async at(address: string): Promise<Contract> {\n    const script = await this.rpc.getScript(address);\n    const entrypoints = await this.rpc.getEntrypoints(address);\n    return new Contract(address, script, this, entrypoints);\n  }\n}\n","const MINIMAL_FEE_MUTEZ = 100;\nconst MINIMAL_FEE_PER_BYTE_MUTEZ = 1;\nconst MINIMAL_FEE_PER_STORAGE_BYTE_MUTEZ = 1000;\nconst MINIMAL_FEE_PER_GAS_MUTEZ = 0.1;\n\nconst GAS_BUFFER = 100;\n\nexport class Estimate {\n  constructor(\n    private readonly _gasLimit: number | string,\n    private readonly _storageLimit: number | string,\n    private readonly opSize: number | string,\n    /**\n     * @description Base fee in mutez (1 mutez = 1e10−6 tez)\n     */\n    private readonly baseFeeMutez: number | string = MINIMAL_FEE_MUTEZ\n  ) {}\n\n  /**\n   * @description Burn fee in mutez\n   */\n  get burnFeeMutez() {\n    return this.roundUp(Number(this.storageLimit) * MINIMAL_FEE_PER_STORAGE_BYTE_MUTEZ);\n  }\n\n  /**\n   * @description Get the estimated storage limit\n   */\n  get storageLimit() {\n    const limit = Math.max(Number(this._storageLimit), 0);\n    return limit > 0 ? limit : 0;\n  }\n\n  /**\n   * @description Suggested gasLimit for operation\n   */\n  get gasLimit() {\n    return Number(this._gasLimit) + GAS_BUFFER;\n  }\n\n  private get operationFeeMutez() {\n    return (\n      this.gasLimit * MINIMAL_FEE_PER_GAS_MUTEZ + Number(this.opSize) * MINIMAL_FEE_PER_BYTE_MUTEZ\n    );\n  }\n\n  private roundUp(nanotez: number) {\n    return Math.ceil(Number(nanotez));\n  }\n\n  /**\n   * @description Minimum fees for operation according to baker defaults\n   */\n  get minimalFeeMutez() {\n    return this.roundUp(MINIMAL_FEE_MUTEZ + this.operationFeeMutez);\n  }\n\n  /**\n   * @description Suggested fee for operation (minimal fees plus a small buffer)\n   */\n  get suggestedFeeMutez() {\n    return this.roundUp(this.operationFeeMutez + MINIMAL_FEE_MUTEZ * 2);\n  }\n\n  /**\n   * @description Fees according to your specified base fee will ensure that at least minimum fees are used\n   */\n  get usingBaseFeeMutez() {\n    return (\n      Math.max(Number(this.baseFeeMutez), MINIMAL_FEE_MUTEZ) + this.roundUp(this.operationFeeMutez)\n    );\n  }\n\n  get totalCost() {\n    return this.minimalFeeMutez + this.burnFeeMutez;\n  }\n}\n","import { PreapplyResponse, RPCRunOperationParam } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport {\n  flattenErrors,\n  flattenOperationResult,\n  TezosOperationError,\n} from '../operations/operation-errors';\nimport {\n  DelegateParams,\n  OriginateParams,\n  ParamsWithKind,\n  PrepareOperationParams,\n  RegisterDelegateParams,\n  RPCOperation,\n  TransferParams,\n} from '../operations/types';\nimport { Estimate } from './estimate';\nimport { EstimationProvider } from './interface';\nimport {\n  createOriginationOperation,\n  createRegisterDelegateOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n} from './prepare';\n\n// RPC require a signature but do not verify it\nconst SIGNATURE_STUB =\n  'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg';\n\nexport class RPCEstimateProvider extends OperationEmitter implements EstimationProvider {\n  private readonly ALLOCATION_STORAGE = 257;\n  private readonly ORIGINATION_STORAGE = 257;\n\n  // Maximum values defined by the protocol\n  private async getAccountLimits(pkh: string) {\n    const balance = await this.rpc.getBalance(pkh);\n    const {\n      hard_gas_limit_per_operation,\n      hard_storage_limit_per_operation,\n      cost_per_byte,\n    } = await this.rpc.getConstants();\n    return {\n      fee: 0,\n      gasLimit: hard_gas_limit_per_operation.toNumber(),\n      storageLimit: Math.floor(\n        BigNumber.min(balance.dividedBy(cost_per_byte), hard_storage_limit_per_operation).toNumber()\n      ),\n    };\n  }\n\n  private createEstimateFromOperationContent(\n    content: PreapplyResponse['contents'][0],\n    size: number\n  ) {\n    const operationResults = flattenOperationResult({ contents: [content] });\n    let totalGas = 0;\n    let totalStorage = 0;\n    operationResults.forEach(result => {\n      totalStorage +=\n        'originated_contracts' in result && typeof result.originated_contracts !== 'undefined'\n          ? result.originated_contracts.length * this.ORIGINATION_STORAGE\n          : 0;\n      totalStorage += 'allocated_destination_contract' in result ? this.ALLOCATION_STORAGE : 0;\n      totalGas += Number(result.consumed_gas) || 0;\n      totalStorage +=\n        'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0;\n    });\n\n    if (\n      content.kind === 'delegation' ||\n      content.kind === 'origination' ||\n      content.kind === 'reveal' ||\n      content.kind === 'transaction'\n    ) {\n      return new Estimate(totalGas || 0, Number(totalStorage || 0), size);\n    } else {\n      return new Estimate(0, 0, size, 0);\n    }\n  }\n\n  private async createEstimate(params: PrepareOperationParams) {\n    const {\n      opbytes,\n      opOb: { branch, contents },\n    } = await this.prepareAndForge(params);\n\n    let operation: RPCRunOperationParam = {\n      operation: { branch, contents, signature: SIGNATURE_STUB },\n      chain_id: await this.rpc.getChainId(),\n    };\n\n    const { opResponse } = await this.simulate(operation);\n\n    const errors = [...flattenErrors(opResponse, 'backtracked'), ...flattenErrors(opResponse)];\n\n    // Fail early in case of errors\n    if (errors.length) {\n      throw new TezosOperationError(errors);\n    }\n\n    while (\n      opResponse.contents.length !== (Array.isArray(params.operation) ? params.operation.length : 1)\n    ) {\n      opResponse.contents.shift();\n    }\n\n    return opResponse.contents.map(x => {\n      return this.createEstimateFromOperationContent(\n        x,\n        opbytes.length / 2 / opResponse.contents.length\n      );\n    });\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an origination operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param OriginationOperation Originate operation parameter\n   */\n  async originate({ fee, storageLimit, gasLimit, ...rest }: OriginateParams) {\n    const pkh = await this.signer.publicKeyHash();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh);\n    const op = await createOriginationOperation({\n      ...rest,\n      ...DEFAULT_PARAMS,\n    });\n    return (await this.createEstimate({ operation: op, source: pkh }))[0];\n  }\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an transfer operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param TransferOperation Originate operation parameter\n   */\n  async transfer({ fee, storageLimit, gasLimit, ...rest }: TransferParams) {\n    const pkh = await this.signer.publicKeyHash();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh);\n    const op = await createTransferOperation({\n      ...rest,\n      ...DEFAULT_PARAMS,\n    });\n    return (await this.createEstimate({ operation: op, source: pkh }))[0];\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async setDelegate(params: DelegateParams) {\n    const sourceOrDefault = params.source || (await this.signer.publicKeyHash());\n    const DEFAULT_PARAMS = await this.getAccountLimits(sourceOrDefault);\n    const op = await createSetDelegateOperation({ ...params, ...DEFAULT_PARAMS });\n    return (await this.createEstimate({ operation: op, source: sourceOrDefault }))[0];\n  }\n\n  async batch(params: ParamsWithKind[]) {\n    const operations: RPCOperation[] = [];\n    const DEFAULT_PARAMS = await this.getAccountLimits(await this.signer.publicKeyHash());\n    for (const param of params) {\n      switch (param.kind) {\n        case 'transaction':\n          operations.push(\n            await createTransferOperation({\n              ...param,\n              ...DEFAULT_PARAMS,\n            })\n          );\n          break;\n        case 'origination':\n          operations.push(\n            await createOriginationOperation({\n              ...param,\n              ...DEFAULT_PARAMS,\n            })\n          );\n          break;\n        case 'delegation':\n          operations.push(\n            await createSetDelegateOperation({\n              ...param,\n              ...DEFAULT_PARAMS,\n            })\n          );\n          break;\n        case 'activate_account':\n          operations.push({\n            ...param,\n            ...DEFAULT_PARAMS,\n          });\n          break;\n        default:\n          throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n      }\n    }\n    return this.createEstimate({ operation: operations });\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async registerDelegate(params: RegisterDelegateParams) {\n    const DEFAULT_PARAMS = await this.getAccountLimits(await this.signer.publicKeyHash());\n    const op = await createRegisterDelegateOperation(\n      { ...params, ...DEFAULT_PARAMS },\n      await this.signer.publicKeyHash()\n    );\n    return (\n      await this.createEstimate({ operation: op, source: await this.signer.publicKeyHash() })\n    )[0];\n  }\n}\n","import { QueryProvider, BalanceHistory, BalanceHistoryOptions } from './interface';\nimport { IndexerClient } from '@taquito/indexer';\n\nexport class IndexerProvider implements QueryProvider {\n  constructor(private indexerClient: IndexerClient) { }\n\n  balanceHistory(\n    address: string,\n    { start, end, limit }: BalanceHistoryOptions = {}\n  ): Promise<BalanceHistory> {\n    return this.indexerClient.getBalanceHistory(address, { start, end, limit });\n  }\n}\n","import { OpFilter, FilterExpression, Filter, OpHashFilter, SourceFilter, KindFilter, DestinationFilter, OperationContent } from './interface';\n\nconst opHashFilter = (op: OperationContent, filter: OpHashFilter) => op.hash === filter.opHash;\n\nconst sourceFilter = (x: OperationContent, filter: SourceFilter) => {\n  switch (x.kind) {\n    case 'endorsement':\n      return 'metadata' in x && x.metadata.delegate === filter.source\n    case 'activate_account':\n      return 'metadata' in x && x.pkh === filter.source\n    default:\n      return 'source' in x && x.source === filter.source\n  }\n}\n\nconst kindFilter = (x: OperationContent, filter: KindFilter) => 'kind' in x && x.kind === filter.kind;\n\nconst destinationFilter = (x: OperationContent, filter: DestinationFilter) => {\n  switch (x.kind) {\n    case 'delegation':\n      return x.delegate === filter.destination;\n    case 'origination':\n      if (\n        'metadata' in x &&\n        'operation_result' in x.metadata &&\n        'originated_contracts' in x.metadata.operation_result &&\n        Array.isArray(x.metadata.operation_result.originated_contracts)\n      ) {\n        return x.metadata.operation_result.originated_contracts.some(\n          contract => contract === filter.destination\n        );\n      }\n      break;\n    case 'transaction':\n      return x.destination === filter.destination;\n    default:\n      return false;\n  }\n};\n\nexport const evaluateOpFilter = (op: OperationContent, filter: OpFilter) => {\n  if ('opHash' in filter) {\n    return opHashFilter(op, filter);\n  } else if ('source' in filter) {\n    return sourceFilter(op, filter)\n  } else if ('kind' in filter) {\n    return kindFilter(op, filter);\n  } else if ('destination' in filter) {\n    return destinationFilter(op, filter)\n  }\n\n  return false;\n};\n\nexport const evaluateExpression = (op: OperationContent, exp: FilterExpression): boolean => {\n  if (Array.isArray(exp.and)) {\n    return exp.and.every((x: OpFilter | FilterExpression) => evaluateFilter(op, x));\n  } else if (Array.isArray(exp.or)) {\n    return exp.or.some((x: OpFilter | FilterExpression) => evaluateFilter(op, x));\n  } else {\n    throw new Error('Filter expression must contains either and/or property');\n  }\n};\n\nexport const evaluateFilter = (op: OperationContent, filter: Filter): boolean => {\n  const filters: OpFilter[] | FilterExpression[] = [];\n  if (!Array.isArray(filter)) {\n    filters.push(filter as any);\n  } else {\n    filters.push(...(filter as any));\n  }\n\n  return filters.every((filterOrExp: OpFilter | FilterExpression) => {\n    if ('and' in filterOrExp || 'or' in filterOrExp) {\n      return evaluateExpression(op, filterOrExp);\n    } else {\n      return evaluateOpFilter(op, filterOrExp as OpFilter);\n    }\n  });\n};\n","import { Observable, Subscription as RXJSSubscription, Subject } from 'rxjs';\nimport { Subscription } from './interface';\nimport { takeUntil } from 'rxjs/operators';\n\nexport class ObservableSubscription<T> implements Subscription<T> {\n  private errorListeners: Array<(error: Error) => void> = [];\n  private messageListeners: Array<(data: T) => void> = [];\n  private closeListeners: Array<() => void> = [];\n  private completed$ = new Subject();\n\n  constructor(obs: Observable<T>) {\n    obs.pipe(takeUntil(this.completed$)).subscribe(\n      (data: T) => {\n        this.call(this.messageListeners, data);\n      },\n      error => {\n        this.call(this.errorListeners, error);\n      },\n      () => {\n        this.call(this.closeListeners);\n      }\n    );\n  }\n\n  private call<K>(listeners: Array<(val: K) => void>, value?: K) {\n    for (const l of listeners) {\n      try {\n        l(value!);\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  private remove(listeners: Array<any>, value: any) {\n    const idx = listeners.indexOf(value);\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n  }\n\n  public on(type: 'error', cb: (error: Error) => void): void;\n  // tslint:disable-next-line: unified-signatures\n  public on(type: 'data', cb: (data: T) => void): void;\n  public on(type: 'close', cb: () => void): void;\n\n  public on(type: 'data' | 'error' | 'close', cb: any): void {\n    switch (type) {\n      case 'data':\n        this.messageListeners.push(cb);\n        break;\n      case 'error':\n        this.errorListeners.push(cb);\n        break;\n      case 'close':\n        this.closeListeners.push(cb);\n        break;\n      default:\n        throw new Error(`Trying to register on an unsupported event: ${type}`);\n    }\n  }\n\n  public off(type: 'error', cb: (error: Error) => void): void;\n  // tslint:disable-next-line: unified-signatures\n  public off(type: 'data', cb: (data: T) => void): void;\n  public off(type: 'close', cb: () => void): void;\n\n  public off(type: 'data' | 'error' | 'close', cb: any): void {\n    switch (type) {\n      case 'data':\n        this.remove(this.messageListeners, cb);\n        break;\n      case 'error':\n        this.remove(this.errorListeners, cb);\n        break;\n      case 'close':\n        this.remove(this.closeListeners, cb);\n        break;\n      default:\n        throw new Error(`Trying to unregister on an unsupported event: ${type}`);\n    }\n  }\n\n  public close() {\n    this.completed$.next();\n  }\n}\n","import { BlockResponse, OperationEntry } from '@taquito/rpc';\nimport { from, Observable, ObservableInput, timer } from 'rxjs';\nimport {\n  concatMap,\n  distinctUntilKeyChanged,\n  first,\n  map,\n  pluck,\n  publishReplay,\n  refCount,\n  switchMap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { evaluateFilter } from './filters';\nimport { Filter, SubscribeProvider, Subscription, OperationContent } from './interface';\nimport { ObservableSubscription } from './observable-subscription';\n\nconst getLastBlock = (context: Context) => {\n  return from(context.rpc.getBlock()).pipe(first());\n};\n\nconst applyFilter = (filter: Filter) =>\n  concatMap<BlockResponse, ObservableInput<OperationContent>>(block => {\n    return new Observable<OperationContent>(sub => {\n      for (const ops of block.operations) {\n        for (const op of ops) {\n          for (const content of op.contents) {\n            if (evaluateFilter({hash: op.hash, ...content}, filter)) {\n              sub.next({hash: op.hash, ...content});\n            }\n          }\n        }\n      }\n      sub.complete();\n    });\n  });\n\nexport class PollingSubscribeProvider implements SubscribeProvider {\n  private newBlock$ = timer(0, this.POLL_INTERVAL).pipe(\n    map(() => this.context),\n    switchMap(getLastBlock),\n    distinctUntilKeyChanged('hash'),\n    publishReplay(),\n    refCount()\n  );\n\n  constructor(private context: Context, public readonly POLL_INTERVAL = 20000) {}\n\n  subscribe(_filter: 'head'): Subscription<string> {\n    return new ObservableSubscription(this.newBlock$.pipe(pluck('hash')));\n  }\n\n  subscribeOperation(filter: Filter): Subscription<OperationContent> {\n    return new ObservableSubscription(this.newBlock$.pipe(applyFilter(filter)));\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport { Operation } from '../operations/operations';\nimport { RPCActivateOperation } from '../operations/types';\nimport { TzProvider } from './interface';\n\nexport class RpcTzProvider extends OperationEmitter implements TzProvider {\n  constructor(context: Context) {\n    super(context);\n  }\n\n  async getBalance(address: string): Promise<BigNumber> {\n    return this.rpc.getBalance(address);\n  }\n\n  async getDelegate(address: string): Promise<string | null> {\n    return this.rpc.getDelegate(address);\n  }\n\n  async activate(pkh: string, secret: string) {\n    const operation: RPCActivateOperation = {\n      kind: 'activate_account',\n      pkh,\n      secret,\n    };\n\n    const forgedBytes = await this.prepareAndForge({ operation: [operation], source: pkh });\n    const bytes = `${forgedBytes.opbytes}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;\n    return new Operation(\n      await this.rpc.injectOperation(bytes),\n      { ...forgedBytes, opbytes: bytes },\n      [],\n      this.context.clone()\n    );\n  }\n}\n","import {\n  RPCOperation,\n  GasConsumingOperation,\n  StorageConsumingOperation,\n  FeeConsumingOperation,\n  ForgedBytes,\n} from './types';\nimport { Operation } from './operations';\nimport { OperationContentsAndResult } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { flattenOperationResult, flattenErrors } from './operation-errors';\n\nexport class BatchOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCOperation[],\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get fee() {\n    return this.sumProp(this.params, 'fee');\n  }\n\n  get gasLimit() {\n    return this.sumProp(this.params, 'gas_limit');\n  }\n\n  get storageLimit() {\n    return this.sumProp(this.params, 'storage_limit');\n  }\n\n  get consumedGas() {\n    return String(this.sumProp(flattenOperationResult({ contents: this.results }), 'consumed_gas'));\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.results }), 'paid_storage_size_diff')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.results });\n  }\n}\n","import { Context } from '../context';\nimport { ContractMethod } from '../contract/contract';\nimport { EstimationProvider } from '../contract/interface';\nimport {\n  createOriginationOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n} from '../contract/prepare';\nimport { BatchOperation } from '../operations/batch-operation';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport {\n  ActivationParams,\n  DelegateParams,\n  OriginateParams,\n  RPCOperation,\n  TransferParams,\n  ParamsWithKind,\n} from '../operations/types';\n\nexport class OperationBatch extends OperationEmitter {\n  private operations: ParamsWithKind[] = [];\n\n  constructor(context: Context, private estimator: EstimationProvider) {\n    super(context);\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withTransfer(params: TransferParams) {\n    this.operations.push({ kind: 'transaction', ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withContractCall(params: ContractMethod) {\n    return this.withTransfer(params.toTransferParams());\n  }\n\n  /**\n   *\n   * @description Add a delegation operation to the batch\n   *\n   * @param params Delegation operation parameter\n   */\n  withDelegation(params: DelegateParams) {\n    this.operations.push({ kind: 'delegation', ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an activation operation to the batch\n   *\n   * @param params Activation operation parameter\n   */\n  withActivation({ pkh, secret }: ActivationParams) {\n    this.operations.push({ kind: 'activate_account', pkh, secret });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an origination operation to the batch\n   *\n   * @param params Origination operation parameter\n   */\n  withOrigination(params: OriginateParams) {\n    this.operations.push({ kind: 'origination', ...params });\n    return this;\n  }\n\n  private async getRPCOp(param: ParamsWithKind) {\n    switch (param.kind) {\n      case 'transaction':\n        return createTransferOperation({\n          ...param,\n        });\n      case 'origination':\n        return createOriginationOperation({\n          ...param,\n        });\n      case 'delegation':\n        return createSetDelegateOperation({\n          ...param,\n        });\n      case 'activate_account':\n        return {\n          ...param,\n        };\n      default:\n        throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n    }\n  }\n\n  /**\n   *\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n   *\n   * @param params Operations parameter\n   */\n  with(params: ParamsWithKind[]) {\n    for (const param of params) {\n      switch (param.kind) {\n        case 'transaction':\n          this.withTransfer(param);\n          break;\n        case 'origination':\n          this.withOrigination(param);\n          break;\n        case 'delegation':\n          this.withDelegation(param);\n          break;\n        case 'activate_account':\n          this.withActivation(param);\n          break;\n        default:\n          throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @description Forge and Inject the operation batch\n   *\n   * @param params Optionally specify the source of the operation\n   */\n  async send(params?: { source?: string }) {\n    const estimates = await this.estimator.batch(this.operations);\n    const ops: RPCOperation[] = [];\n    let i = 0;\n    for (const op of this.operations) {\n      if (op.kind !== 'activate_account') {\n        const estimated = await this.estimate(op, async () => estimates[i]);\n        ops.push(await this.getRPCOp({ ...op, ...estimated }));\n      } else {\n        ops.push({ ...op });\n      }\n      i++;\n    }\n    const source = (params && params.source) || (await this.signer.publicKeyHash());\n    const opBytes = await this.prepareAndForge({\n      operation: ops,\n      source,\n    });\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new BatchOperation(hash, ops, source, forgedBytes, opResponse, context);\n  }\n}\n\nexport class RPCBatchProvider {\n  constructor(private context: Context, private estimator: EstimationProvider) {}\n\n  /***\n   *\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n   *\n   * @param params List of operation to batch together\n   */\n  batch(params?: ParamsWithKind[]) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n}\n","const setDelegate = (key: string) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'key_hash' }, { string: key }],\n    },\n    { prim: 'SOME' },\n    { prim: 'SET_DELEGATE' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst transferImplicit = (key: string, mutez: number) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'key_hash' }, { string: key }],\n    },\n    { prim: 'IMPLICIT_ACCOUNT' },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'mutez' }, { int: `${mutez}` }],\n    },\n    { prim: 'UNIT' },\n    { prim: 'TRANSFER_TOKENS' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst removeDelegate = () => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    { prim: 'NONE', args: [{ prim: 'key_hash' }] },\n    { prim: 'SET_DELEGATE' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst transferToContract = (key: string, amount: number) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'address' }, { string: key }],\n    },\n    { prim: 'CONTRACT', args: [{ prim: 'unit' }] },\n    [\n      {\n        prim: 'IF_NONE',\n        args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], []],\n      },\n    ],\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'mutez' }, { int: `${amount}` }],\n    },\n    { prim: 'UNIT' },\n    { prim: 'TRANSFER_TOKENS' },\n    { prim: 'CONS' },\n  ];\n};\n\nexport const MANAGER_LAMBDA = {\n  setDelegate,\n  removeDelegate,\n  transferImplicit,\n  transferToContract,\n};\n","import { Forger, ForgeParams, ForgeResponse } from './interface';\n\nexport class ForgingMismatchError implements Error {\n  name: string = 'ForgingMismatchError';\n  message: string = 'Forging mismatch error';\n  constructor(public results: string[]) {}\n}\n\nexport class CompositeForger implements Forger {\n  constructor(private forgers: Forger[]) {\n    if (forgers.length === 0) {\n      throw new Error('At least one forger must be specified');\n    }\n  }\n\n  async forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    const results = await Promise.all(\n      this.forgers.map(forger => {\n        return forger.forge({ branch, contents });\n      })\n    );\n\n    if (results.length === 0) {\n      throw new Error('At least one forger must be specified');\n    }\n\n    let lastResult: string = results.pop()!; // Assumed to be more than one since we\n    while (results.length) {\n      const currentResult = results.pop()!;\n\n      if (currentResult !== lastResult) {\n        throw new ForgingMismatchError([lastResult, currentResult]);\n      }\n      lastResult = currentResult;\n    }\n\n    return lastResult;\n  }\n}\n","import { IndexerClient } from '@taquito/indexer';\nimport { RpcClient } from '@taquito/rpc';\nimport { InMemorySigner } from '@taquito/signer';\nimport { Protocols } from './constants';\nimport { Context, Config, TaquitoProvider } from './context';\nimport { ContractProvider, EstimationProvider } from './contract/interface';\nimport { RpcContractProvider } from './contract/rpc-contract-provider';\nimport { RPCEstimateProvider } from './contract/rpc-estimate-provider';\nimport { format } from './format';\nimport { IndexerProvider } from './query/indexer-provider';\nimport { QueryProvider } from './query/interface';\nimport { Signer } from './signer/interface';\nimport { NoopSigner } from './signer/noop';\nimport { SubscribeProvider } from './subscribe/interface';\nimport { PollingSubscribeProvider } from './subscribe/polling-provider';\nimport { TzProvider } from './tz/interface';\nimport { RpcTzProvider } from './tz/rpc-tz-provider';\nimport { Forger } from './forger/interface';\nimport { RpcForger } from './forger/rpc-forger';\nimport { RPCBatchProvider } from './batch/rpc-batch-provider';\n\nexport * from './query/interface';\nexport * from './signer/interface';\nexport * from './subscribe/interface';\nexport * from './forger/interface';\nexport * from './tz/interface';\nexport * from './contract';\nexport * from './contract/big-map';\nexport * from './constants';\n\nexport { TaquitoProvider } from './context';\nexport { RpcForger } from './forger/rpc-forger';\nexport { CompositeForger } from './forger/composite-forger';\n\nexport {\n  TezosOperationError,\n  TezosOperationErrorWithMessage,\n  TezosPreapplyFailureError,\n} from './operations/operation-errors';\n\nexport { SubscribeProvider } from './subscribe/interface';\nexport interface SetProviderOptions {\n  forger?: Forger;\n  rpc?: string | RpcClient;\n  indexer?: string | IndexerClient;\n  stream?: string | SubscribeProvider;\n  signer?: Signer;\n  protocol?: Protocols;\n  config?: Config;\n}\n\n/**\n * @description Facade class that surfaces all of the libraries capability and allow it's configuration\n */\nexport class TezosToolkit {\n  private _rpcClient = new RpcClient();\n  private _indexerClient: IndexerClient = new IndexerClient();\n  private _query!: QueryProvider;\n  private _stream!: SubscribeProvider;\n  private _options: SetProviderOptions = {};\n\n  private _context: Context = new Context();\n\n  private _tz = new RpcTzProvider(this._context);\n  private _estimate = new RPCEstimateProvider(this._context);\n  private _contract = new RpcContractProvider(this._context, this._estimate);\n  private _batch = new RPCBatchProvider(this._context, this._estimate);\n\n  public readonly format = format;\n\n  constructor() {\n    this.setProvider({ rpc: this._rpcClient });\n  }\n\n  /**\n   *\n   * @param options rpc url or rpcClient to use to interact with the Tezos network and indexer url to use to interact with the Tezos network\n   */\n  setProvider({ rpc, indexer, stream, signer, protocol, config, forger }: SetProviderOptions) {\n    this.setRpcProvider(rpc);\n    this.setIndexerProvider(indexer);\n    this.setStreamProvider(stream);\n    this.setSignerProvider(signer);\n    this.setForgerProvider(forger);\n\n    this._context.proto = protocol;\n    this._context.config = config as Required<Config>;\n  }\n\n  private setSignerProvider(signer: SetProviderOptions['signer']) {\n    if (!this._options.signer && typeof signer === 'undefined') {\n      this._context.signer = new NoopSigner();\n      this._options.signer = signer;\n    } else if (typeof signer !== 'undefined') {\n      this._context.signer = signer;\n      this._options.signer = signer;\n    }\n  }\n\n  private setRpcProvider(rpc: SetProviderOptions['rpc']) {\n    if (typeof rpc === 'string') {\n      this._rpcClient = new RpcClient(rpc);\n    } else if (rpc instanceof RpcClient) {\n      this._rpcClient = rpc;\n    } else if (this._options.rpc === undefined) {\n      this._rpcClient = new RpcClient();\n    }\n    this._options.rpc = rpc;\n    this._context.rpc = this._rpcClient;\n  }\n\n  private setForgerProvider(forger: SetProviderOptions['forger']) {\n    const f = typeof forger === 'undefined' ? new RpcForger(this._context) : forger;\n    this._options.forger = f;\n    this._context.forger = f;\n  }\n\n  private setIndexerProvider(indexer: SetProviderOptions['indexer']) {\n    if (typeof indexer === 'string') {\n      this._indexerClient = new IndexerClient(indexer);\n    } else if (indexer instanceof IndexerClient) {\n      this._indexerClient = indexer;\n    } else if (this._options.indexer === undefined) {\n      this._indexerClient = new IndexerClient();\n    }\n\n    this._query = new IndexerProvider(this._indexerClient);\n    this._options.indexer = indexer;\n  }\n\n  private setStreamProvider(stream: SetProviderOptions['stream']) {\n    if (typeof stream === 'string') {\n      this._stream = new PollingSubscribeProvider(new Context(new RpcClient(stream)));\n    } else if (typeof stream !== 'undefined') {\n      this._stream = stream;\n    } else if (this._options.stream === undefined) {\n      this._stream = new PollingSubscribeProvider(this._context);\n    }\n    this._options.stream = stream;\n  }\n\n  /**\n   * @description Provide access to tezos account management\n   */\n  get tz(): TzProvider {\n    return this._tz;\n  }\n\n  /**\n   * @description Provide access to smart contract utilities\n   */\n  get contract(): ContractProvider {\n    return this._contract;\n  }\n\n  public batch = this._batch.batch.bind(this._batch);\n\n  /**\n   * @description Provide access to operation estimation utilities\n   */\n  get estimate(): EstimationProvider {\n    return this._estimate;\n  }\n\n  /**\n   * @description Provide access to querying utilities backed by an indexer implementation\n   */\n  get query(): QueryProvider {\n    return this._query;\n  }\n\n  /**\n   * @description Provide access to streaming utilities backed by an streamer implementation\n   */\n  get stream(): SubscribeProvider {\n    return this._stream;\n  }\n\n  /**\n   * @description Provide access to the currently used rpc client\n   */\n  get rpc(): RpcClient {\n    return this._context.rpc;\n  }\n\n  /**\n   * @description Provide access to the currently used signer\n   */\n  get signer() {\n    return this._context.signer;\n  }\n\n  /**\n   *\n   * @description Import a key to sign operation\n   *\n   * @param privateKey Key to load in memory\n   * @param passphrase If the key is encrypted passphrase to decrypt it\n   */\n  importKey(privateKey: string, passphrase?: string): Promise<void>;\n  /**\n   *\n   * @description Import a key using faucet/fundraiser parameter\n   *\n   * @param email Faucet email\n   * @param password Faucet password\n   * @param mnemonic Faucet mnemonic\n   * @param secret Faucet secret\n   */\n  // tslint:disable-next-line: unified-signatures\n  importKey(email: string, password: string, mnemonic: string, secret: string): Promise<void>;\n\n  async importKey(\n    privateKeyOrEmail: string,\n    passphrase?: string,\n    mnemonic?: string,\n    secret?: string\n  ): Promise<void> {\n    if (privateKeyOrEmail && passphrase && mnemonic && secret) {\n      const signer = InMemorySigner.fromFundraiser(privateKeyOrEmail, passphrase, mnemonic);\n      const pkh = await signer.publicKeyHash();\n      let op;\n      try {\n        op = await this.tz.activate(pkh, secret);\n      } catch (ex) {\n        const isInvalidActivationError = ex && ex.body && /Invalid activation/.test(ex.body);\n        if (!isInvalidActivationError) {\n          throw ex;\n        }\n      }\n      if (op) {\n        await op.confirmation();\n      }\n      this.setSignerProvider(signer);\n    } else {\n      // Fallback to regular import\n      this.setSignerProvider(new InMemorySigner(privateKeyOrEmail, passphrase));\n    }\n  }\n\n  getFactory<T, K extends Array<any>>(ctor: TaquitoProvider<T, K>) {\n    return (...args: K) => {\n      return new ctor(this._context, ...args);\n    };\n  }\n}\n\n/**\n * @description Default Tezos toolkit instance\n */\nexport const Tezos = new TezosToolkit();\n"],"names":["RpcClient","ReplaySubject","defer","timer","first","from","tap","map","switchMap","mapTo","switchMapTo","filter","shareReplay","DEFAULT_GAS_LIMIT","DEFAULT_FEE","DEFAULT_STORAGE_LIMIT","Protocols","Schema","ParameterSchema","ml2mic","sexp2mic","encodeExpr","Subject","takeUntil","concatMap","Observable","distinctUntilKeyChanged","publishReplay","refCount","pluck","IndexerClient","rpc","indexer","signer","InMemorySigner"],"mappings":"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"}