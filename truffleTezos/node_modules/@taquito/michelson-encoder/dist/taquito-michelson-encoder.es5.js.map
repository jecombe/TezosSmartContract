{"version":3,"file":"taquito-michelson-encoder.es5.js","sources":["../src/tokens/token.ts","../src/tokens/bigmap.ts","../src/tokens/or.ts","../src/tokens/pair.ts","../src/tokens/comparable/nat.ts","../src/tokens/comparable/string.ts","../src/tokens/comparable/address.ts","../src/tokens/map.ts","../src/tokens/comparable/bool.ts","../src/tokens/contract.ts","../src/tokens/list.ts","../src/tokens/comparable/mutez.ts","../src/tokens/comparable/bytes.ts","../src/tokens/option.ts","../src/tokens/comparable/timestamp.ts","../src/tokens/comparable/int.ts","../src/tokens/unit.ts","../src/tokens/key.ts","../src/tokens/comparable/key_hash.ts","../src/tokens/signature.ts","../src/tokens/lambda.ts","../src/tokens/operation.ts","../src/tokens/set.ts","../src/tokens/chain-id.ts","../src/tokens/tokens.ts","../src/tokens/createToken.ts","../src/schema/storage.ts","../src/schema/parameter.ts"],"sourcesContent":["import { MichelsonV1Expression } from '@taquito/rpc';\n\nexport abstract class TokenValidationError implements Error {\n  name: string = 'ValidationError';\n  public message: string;\n\n  constructor(public value: any, public token: Token, baseMessage: string) {\n    const annot = this.token.annot();\n    const annotText = annot ? `[${annot}] ` : '';\n    this.message = `${annotText}${baseMessage}`;\n  }\n}\n\nexport type TokenFactory = (val: any, idx: number) => Token;\n\nexport interface Semantic {\n  [key: string]: (value: MichelsonV1Expression, schema: MichelsonV1Expression) => any;\n}\n\nexport abstract class Token {\n  constructor(\n    protected val: { prim: string; args: any[]; annots?: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {}\n\n  annot() {\n    return (Array.isArray(this.val.annots) && this.val.annots.length > 0\n      ? this.val.annots[0]\n      : String(this.idx)\n    ).replace(/(%|\\:)(_Liq_entry_)?/, '');\n  }\n\n  hasAnnotations() {\n    return Array.isArray(this.val.annots) && this.val.annots.length;\n  }\n\n  public createToken = this.fac;\n\n  public abstract ExtractSchema(): any;\n\n  public abstract Execute(val: any, semantics?: Semantic): any;\n\n  public abstract Encode(_args: any[]): any;\n\n  public abstract EncodeObject(args: any): any;\n\n  public ExtractSignature() {\n    return [[this.ExtractSchema()]];\n  }\n}\n\nexport abstract class ComparableToken extends Token {\n  abstract ToBigMapKey(\n    val: string\n  ): {\n    key: { [key: string]: string };\n    type: { prim: string };\n  };\n\n  abstract ToKey(val: string): string;\n\n  compare(o1: string, o2: string) {\n    return o1 < o2 ? -1 : 1;\n  }\n}\n","import { Token, TokenFactory, ComparableToken, Semantic, TokenValidationError } from './token';\n\nexport class BigMapValidationError extends TokenValidationError {\n  name: string = 'BigMapValidationError';\n  constructor(public value: any, public token: BigMapToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class BigMapToken extends Token {\n  static prim = 'big_map';\n  constructor(\n    protected val: { prim: string; args: any[]; annots?: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get ValueSchema() {\n    return this.createToken(this.val.args[1], 0);\n  }\n\n  get KeySchema(): ComparableToken {\n    return (this.createToken(this.val.args[0], 0) as unknown) as ComparableToken;\n  }\n\n  public ExtractSchema() {\n    return {\n      [this.KeySchema.ExtractSchema()]: this.ValueSchema.ExtractSchema(),\n    };\n  }\n\n  private isValid(value: any): BigMapValidationError | null {\n    if (typeof value === 'object') {\n      return null;\n    }\n\n    return new BigMapValidationError(value, this, 'Value must be an object');\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Object.keys(val)\n      .sort(this.KeySchema.compare)\n      .map(key => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.Encode([key]), this.ValueSchema.EncodeObject(val[key])],\n        };\n      });\n  }\n\n  public EncodeObject(args: any): any {\n    const val = args;\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Object.keys(val)\n      .sort(this.KeySchema.compare)\n      .map(key => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val[key])],\n        };\n      });\n  }\n\n  public Execute(val: any[] | { int: string }, semantic?: Semantic) {\n    if (semantic && semantic[BigMapToken.prim]) {\n      return semantic[BigMapToken.prim](val as any, this.val);\n    }\n\n    if (Array.isArray(val)) {\n      // Athens is returning an empty array for big map in storage\n      // Internal: In taquito v5 it is still used to decode big map diff (as if they were a regular map)\n      return val.reduce((prev, current) => {\n        return {\n          ...prev,\n          [this.KeySchema.ToKey(current.args[0])]: this.ValueSchema.Execute(current.args[1]),\n        };\n      }, {});\n    } else if ('int' in val) {\n      // Babylon is returning an int with the big map id in contract storage\n      return val.int;\n    } else {\n      // Unknown case\n      throw new Error(\n        `Big map is expecting either an array (Athens) or an object with an int property (Babylon). Got ${JSON.stringify(\n          val\n        )}`\n      );\n    }\n  }\n}\n","import { Token, TokenFactory, Semantic } from './token';\n\nexport class OrToken extends Token {\n  static prim = 'or';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Encode(args: any[]): any {\n    const label = args[args.length - 1];\n\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      args.pop();\n      return { prim: 'Left', args: [leftToken.Encode(args)] };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      args.pop();\n      return { prim: 'Right', args: [rightToken.Encode(args)] };\n    } else {\n      if (leftToken instanceof OrToken) {\n        let val = leftToken.Encode(args);\n        if (val) {\n          return { prim: 'Left', args: [val] };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        let val = rightToken.Encode(args);\n        if (val) {\n          return { prim: 'Right', args: [val] };\n        }\n      }\n      return null;\n    }\n  }\n\n  public ExtractSignature(): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    const newSig = [];\n\n    if (leftToken instanceof OrToken) {\n      newSig.push(...leftToken.ExtractSignature());\n    } else {\n      for (const sig of leftToken.ExtractSignature()) {\n        newSig.push([leftToken.annot(), ...sig]);\n      }\n    }\n\n    if (rightToken instanceof OrToken) {\n      newSig.push(...rightToken.ExtractSignature());\n    } else {\n      for (const sig of rightToken.ExtractSignature()) {\n        newSig.push([rightToken.annot(), ...sig]);\n      }\n    }\n\n    return newSig;\n  }\n\n  public EncodeObject(args: any): any {\n    const label = Object.keys(args)[0];\n\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      return { prim: 'Left', args: [leftToken.EncodeObject(args[label])] };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      return { prim: 'Right', args: [rightToken.EncodeObject(args[label])] };\n    } else {\n      if (leftToken instanceof OrToken) {\n        let val = leftToken.EncodeObject(args);\n        if (val) {\n          return { prim: 'Left', args: [val] };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        let val = rightToken.EncodeObject(args);\n        if (val) {\n          return { prim: 'Right', args: [val] };\n        }\n      }\n      return null;\n    }\n  }\n\n  public Execute(val: any, semantics?: Semantic): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (val.prim === 'Right') {\n      return rightToken.Execute(val.args[0], semantics);\n    } else if (val.prim === 'Left') {\n      return {\n        [leftToken.annot()]: leftToken.Execute(val.args[0], semantics),\n      };\n    } else {\n      throw new Error(`Was expecting Left or Right prim but got: ${val.prim}`);\n    }\n  }\n\n  private traversal(\n    getLeftValue: (token: Token) => any,\n    getRightValue: (token: Token) => any,\n    concat: (left: any, right: any) => any\n  ) {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    let leftValue;\n    if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    } else {\n      leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n    let rightValue;\n    if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = { [rightToken.annot()]: getRightValue(rightToken) };\n    }\n\n    const res = concat(leftValue, rightValue);\n\n    return res;\n  }\n  public ExtractSchema(): any {\n    return this.traversal(\n      leftToken => leftToken.ExtractSchema(),\n      rightToken => rightToken.ExtractSchema(),\n      (leftValue, rightValue) => ({\n        ...leftValue,\n        ...rightValue,\n      })\n    );\n  }\n}\n","import { Token, TokenFactory, Semantic } from './token';\nimport { OrToken } from './or';\n\nexport class PairToken extends Token {\n  static prim = 'pair';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Encode(args: any[]): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof PairToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    return {\n      prim: 'Pair',\n      args: [leftToken.Encode(args), rightToken.Encode(args)],\n    };\n  }\n\n  public ExtractSignature(): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    const newSig = [];\n\n    for (const leftSig of leftToken.ExtractSignature()) {\n      for (const rightSig of rightToken.ExtractSignature()) {\n        newSig.push([...leftSig, ...rightSig]);\n      }\n    }\n\n    return newSig;\n  }\n  public EncodeObject(args: any): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof PairToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    let leftValue;\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = args;\n    } else {\n      leftValue = args[leftToken.annot()];\n    }\n\n    let rightValue;\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = args;\n    } else {\n      rightValue = args[rightToken.annot()];\n    }\n\n    return {\n      prim: 'Pair',\n      args: [leftToken.EncodeObject(leftValue), rightToken.EncodeObject(rightValue)],\n    };\n  }\n\n  private traversal(getLeftValue: (token: Token) => any, getRightValue: (token: Token) => any) {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    let leftValue;\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    } else {\n      leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n    let rightValue;\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = { [rightToken.annot()]: getRightValue(rightToken) };\n    }\n\n    const res = {\n      ...leftValue,\n      ...rightValue,\n    };\n\n    return res;\n  }\n\n  public Execute(val: any, semantics?: Semantic): { [key: string]: any } {\n    return this.traversal(\n      leftToken => leftToken.Execute(val.args[0], semantics),\n      rightToken => rightToken.Execute(val.args[1], semantics)\n    );\n  }\n\n  public ExtractSchema(): any {\n    return this.traversal(\n      leftToken => leftToken.ExtractSchema(),\n      rightToken => rightToken.ExtractSchema()\n    );\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport BigNumber from 'bignumber.js';\n\nexport class NatValidationError extends TokenValidationError {\n  name: string = 'NatValidationError';\n  constructor(public value: any, public token: NatToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class NatToken extends ComparableToken {\n  static prim = 'nat';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  private isValid(val: any): NatValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new NatValidationError(val, this, `Value is not a number: ${val}`);\n    } else if (bigNumber.isNegative()) {\n      return new NatValidationError(val, this, `Value cannot be negative: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public ExtractSchema() {\n    return NatToken.prim;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { int: val },\n      type: { prim: NatToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return int;\n  }\n}\n","import { Token, TokenFactory, ComparableToken } from '../token';\n\nexport class StringToken extends ComparableToken {\n  static prim = 'string';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): string {\n    return val[Object.keys(val)[0]];\n  }\n\n  public ExtractSchema() {\n    return StringToken.prim;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    return { string: val };\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: StringToken.prim },\n    };\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport { b58decode, encodePubKey, validateAddress, ValidationResult } from '@taquito/utils';\n\nexport class AddressValidationError extends TokenValidationError {\n  name: string = 'AddressValidationError';\n  constructor(public value: any, public token: AddressToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class AddressToken extends ComparableToken {\n  static prim = 'address';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public ToBigMapKey(val: any) {\n    const decoded = b58decode(val);\n    return {\n      key: { bytes: decoded },\n      type: { prim: 'bytes' },\n    };\n  }\n\n  private isValid(value: any): AddressValidationError | null {\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new AddressValidationError(value, this, `Address is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  // tslint:disable-next-line: variable-name\n  public Execute(val: { bytes: string; string: string }): string {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodePubKey(val.bytes);\n  }\n\n  public ExtractSchema() {\n    return AddressToken.prim;\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ bytes, string }: any) {\n    if (string) {\n      return string;\n    }\n\n    return encodePubKey(bytes);\n  }\n\n  compare(address1: string, address2: string) {\n    const isImplicit = (address: string) => {\n      return address.startsWith('tz');\n    };\n\n    if (isImplicit(address1) && isImplicit(address2)) {\n      return super.compare(address1, address2);\n    } else if (isImplicit(address1)) {\n      return -1;\n    } else if (isImplicit(address2)) {\n      return 1;\n    } else {\n      return super.compare(address1, address2);\n    }\n  }\n}\n","import { Token, TokenFactory, Semantic, TokenValidationError, ComparableToken } from './token';\n\nexport class MapValidationError extends TokenValidationError {\n  name: string = 'MapValidationError';\n  constructor(public value: any, public token: MapToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class MapToken extends Token {\n  static prim = 'map';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get ValueSchema() {\n    return this.createToken(this.val.args[1], 0);\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.createToken(this.val.args[0], 0) as any;\n  }\n\n  private isValid(value: any): MapValidationError | null {\n    if (typeof value === 'object') {\n      return null;\n    }\n\n    return new MapValidationError(value, this, 'Value must be an object');\n  }\n\n  public Execute(val: any[], semantics?: Semantic): { [key: string]: any } {\n    return val.reduce((prev, current) => {\n      return {\n        ...prev,\n        [this.KeySchema.ToKey(current.args[0])]: this.ValueSchema.Execute(\n          current.args[1],\n          semantics\n        ),\n      };\n    }, {});\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Object.keys(val)\n      .sort(this.KeySchema.compare)\n      .map(key => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.Encode([key]), this.ValueSchema.EncodeObject(val[key])],\n        };\n      });\n  }\n\n  public EncodeObject(args: any): any {\n    const val = args;\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Object.keys(val)\n      .sort(this.KeySchema.compare)\n      .map(key => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val[key])],\n        };\n      });\n  }\n\n  public ExtractSchema() {\n    return {\n      [this.KeySchema.ExtractSchema()]: this.ValueSchema.ExtractSchema(),\n    };\n  }\n}\n","import { Token, TokenFactory } from '../token';\n\nexport class BoolToken extends Token {\n  static prim = 'bool';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): boolean {\n    return String(val.prim).toLowerCase() === 'true' ? true : false;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { prim: val ? 'True' : 'False' };\n  }\n\n  public EncodeObject(val: any) {\n    return { prim: val ? 'True' : 'False' };\n  }\n\n  public ExtractSchema() {\n    return BoolToken.prim;\n  }\n}\n","import { encodePubKey, validateAddress, ValidationResult } from '@taquito/utils';\nimport { Token, TokenFactory, TokenValidationError } from './token';\n\nexport class ContractValidationError extends TokenValidationError {\n  name: string = 'ContractValidationError';\n  constructor(public value: any, public token: ContractToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ContractToken extends Token {\n  static prim = 'contract';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(value: any): ContractValidationError | null {\n    // tz1,tz2 and tz3 seems to be valid contract values (for Unit contract)\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new ContractValidationError(value, this, 'Contract address is not valid');\n    }\n\n    return null;\n  }\n\n  public Execute(val: { bytes: string; string: string }) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodePubKey(val.bytes);\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return ContractToken.prim;\n  }\n}\n","import { Token, TokenFactory, Semantic, TokenValidationError } from './token';\n\nexport class ListValidationError extends TokenValidationError {\n  name: string = 'ListValidationError';\n  constructor(public value: any, public token: ListToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ListToken extends Token {\n  static prim = 'list';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(value: any): ListValidationError | null {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new ListValidationError(value, this, 'Value must be an array');\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    const schema = this.createToken(this.val.args[0], 0);\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, schema.EncodeObject(current)];\n    }, []);\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    const schema = this.createToken(this.val.args[0], 0);\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, schema.Execute(current, semantics)];\n    }, []);\n  }\n\n  public EncodeObject(args: any): any {\n    const schema = this.createToken(this.val.args[0], 0);\n\n    const err = this.isValid(args);\n    if (err) {\n      throw err;\n    }\n\n    return args.reduce((prev: any, current: any) => {\n      return [...prev, schema.EncodeObject(current)];\n    }, []);\n  }\n\n  public ExtractSchema() {\n    return ListToken.prim;\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport BigNumber from 'bignumber.js';\n\nexport class MutezValidationError extends TokenValidationError {\n  name: string = 'MutezValidationError';\n  constructor(public value: any, public token: MutezToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class MutezToken extends ComparableToken {\n  static prim = 'mutez';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  public ExtractSchema() {\n    return MutezToken.prim;\n  }\n\n  private isValid(val: any): MutezValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new MutezValidationError(val, this, `Value is not a number: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { int: val },\n      type: { prim: MutezToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return int;\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\n\nexport class BytesValidationError extends TokenValidationError {\n  name: string = 'BytesValidationError';\n  constructor(public value: any, public token: BytesToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class BytesToken extends ComparableToken {\n  static prim = 'bytes';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { bytes: val },\n      type: { prim: BytesToken.prim },\n    };\n  }\n\n  private isValid(val: any): BytesValidationError | null {\n    if (typeof val === 'string' && /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new BytesValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { bytes: String(val).toString() };\n  }\n\n  public EncodeObject(val: any) {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { bytes: String(val).toString() };\n  }\n\n  public Execute(val: any): string {\n    return val.bytes;\n  }\n\n  public ExtractSchema() {\n    return BytesToken.prim;\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ bytes, string }: any) {\n    if (string) {\n      return string;\n    }\n\n    return bytes;\n  }\n}\n","import { Token, TokenFactory, Semantic } from './token';\n\nexport class OptionToken extends Token {\n  static prim = 'option';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public subToken(): Token {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  annot(): string {\n    return Array.isArray(this.val.annots)\n      ? super.annot()\n      : this.createToken(this.val.args[0], this.idx).annot();\n  }\n\n  public Encode(args: any): any {\n    const value = args;\n    if (\n      value === undefined ||\n      value === null ||\n      (Array.isArray(value) && (value[0] === undefined || value[0] === null))\n    ) {\n      return { prim: 'None' };\n    }\n\n    const schema = this.createToken(this.val.args[0], 0);\n    return { prim: 'Some', args: [schema.Encode(args)] };\n  }\n\n  public EncodeObject(args: any): any {\n    const schema = this.createToken(this.val.args[0], 0);\n    const value = args;\n\n    if (value === undefined || value === null) {\n      return { prim: 'None' };\n    }\n\n    return { prim: 'Some', args: [schema.EncodeObject(value)] };\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    if (val.prim === 'None') {\n      return null;\n    }\n\n    const schema = this.createToken(this.val.args[0], 0);\n    return schema.Execute(val.args[0], semantics);\n  }\n\n  public ExtractSchema() {\n    const schema = this.createToken(this.val.args[0], 0);\n    return schema.ExtractSchema();\n  }\n\n  public ExtractSignature() {\n    const schema = this.createToken(this.val.args[0], 0);\n    return [...schema.ExtractSignature(), []];\n  }\n}\n","import { Token, TokenFactory, ComparableToken } from '../token';\n\nexport class TimestampToken extends ComparableToken {\n  static prim = 'timestamp';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { string?: string; int?: string }) {\n    if (val.string) {\n      return new Date(val.string).toISOString();\n    } else if (val.int) {\n      return new Date(Number(val.int) * 1000).toISOString();\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return TimestampToken.prim;\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: TimestampToken.prim },\n    };\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport BigNumber from 'bignumber.js';\n\nexport class IntValidationError extends TokenValidationError {\n  name: string = 'IntValidationError';\n  constructor(public value: any, public token: IntToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class IntToken extends ComparableToken {\n  static prim = 'int';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { [key: string]: string }): { [key: string]: any } {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  public ExtractSchema() {\n    return IntToken.prim;\n  }\n\n  private isValid(val: any): IntValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new IntValidationError(val, this, `Value is not a number: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { int: val },\n      type: { prim: IntToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return int;\n  }\n}\n","import { Token, TokenFactory } from './token';\n\nexport class UnitToken extends Token {\n  static prim = 'unit';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Encode(args: any[]): any {\n    args.pop();\n    return { prim: 'Unit' };\n  }\n\n  public EncodeObject(_val: any): any {\n    return { prim: 'Unit' };\n  }\n\n  public Execute(): { [key: string]: any } {\n    return null as any;\n  }\n\n  public ExtractSchema() {\n    return UnitToken.prim;\n  }\n}\n","import { Token, TokenFactory, TokenValidationError } from './token';\nimport { encodeKey, validatePublicKey, ValidationResult } from '@taquito/utils';\n\nexport class KeyValidationError extends TokenValidationError {\n  name: string = 'KeyValidationError';\n  constructor(public value: any, public token: KeyToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class KeyToken extends Token {\n  static prim = 'key';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { bytes: string; string: string }): string {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKey(val.bytes);\n  }\n\n  private isValid(value: any): KeyValidationError | null {\n    if (validatePublicKey(value) !== ValidationResult.VALID) {\n      return new KeyValidationError(value, this, 'Key is not valid');\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return KeyToken.prim;\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport { encodeKeyHash, validateKeyHash, ValidationResult } from '@taquito/utils';\n\nexport class KeyHashValidationError extends TokenValidationError {\n  name: string = 'KeyHashValidationError';\n  constructor(public value: any, public token: KeyHashToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class KeyHashToken extends ComparableToken {\n  static prim = 'key_hash';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { bytes: string; string: string }): string {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKeyHash(val.bytes);\n  }\n\n  private isValid(value: any): KeyHashValidationError | null {\n    if (validateKeyHash(value) !== ValidationResult.VALID) {\n      return new KeyHashValidationError(value, this, `KeyHash is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return KeyHashToken.prim;\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ string, bytes }: any) {\n    if (string) {\n      return string;\n    }\n\n    return encodeKeyHash(bytes);\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: KeyHashToken.prim },\n    };\n  }\n}\n","import { Token, TokenFactory, TokenValidationError } from './token';\nimport { validateSignature, ValidationResult } from '@taquito/utils';\n\nexport class SignatureValidationError extends TokenValidationError {\n  name: string = 'SignatureValidationError';\n  constructor(public value: any, public token: SignatureToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SignatureToken extends Token {\n  static prim = 'signature';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return val.string;\n  }\n\n  private isValid(value: any): SignatureValidationError | null {\n    if (validateSignature(value) !== ValidationResult.VALID) {\n      return new SignatureValidationError(value, this, 'Signature is not valid');\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return SignatureToken.prim;\n  }\n}\n","import { Token, TokenFactory } from './token';\n\nexport class LambdaToken extends Token {\n  static prim = 'lambda';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return val.string;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return val;\n  }\n\n  public EncodeObject(val: any): any {\n    return val;\n  }\n\n  public ExtractSchema() {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    const rightToken = this.createToken(this.val.args[1], this.idx + 1);\n    return {\n      [LambdaToken.prim]: {\n        parameters: leftToken.ExtractSchema(),\n        returns: rightToken.ExtractSchema(),\n      },\n    };\n  }\n}\n","import { Token, TokenFactory } from './token';\n\nexport class OperationToken extends Token {\n  static prim = 'operation';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return val.string;\n  }\n\n  public Encode(...args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return OperationToken.prim;\n  }\n}\n","import { Token, TokenFactory, Semantic, TokenValidationError, ComparableToken } from './token';\n\nexport class SetValidationError extends TokenValidationError {\n  name: string = 'SetValidationError';\n  constructor(public value: any, public token: SetToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SetToken extends Token {\n  static prim = 'set';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.createToken(this.val.args[0], 0) as any;\n  }\n\n  private isValid(value: any): SetValidationError | null {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new SetValidationError(value, this, 'Value must be an array');\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return val.sort(this.KeySchema.compare).reduce((prev: any, current: any) => {\n      return [...prev, this.KeySchema.EncodeObject(current)];\n    }, []);\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, this.KeySchema.Execute(current, semantics)];\n    }, []);\n  }\n\n  public EncodeObject(args: any): any {\n    const err = this.isValid(args);\n    if (err) {\n      throw err;\n    }\n\n    return args.sort(this.KeySchema.compare).reduce((prev: any, current: any) => {\n      return [...prev, this.KeySchema.EncodeObject(current)];\n    }, []);\n  }\n\n  public ExtractSchema() {\n    return SetToken.prim;\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from './token';\nimport { validateChain, ValidationResult } from '@taquito/utils';\n\nexport class ChainIDValidationError extends TokenValidationError {\n  name: string = 'ChainIDValidationError';\n  constructor(public value: any, public token: ChainIDToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ChainIDToken extends ComparableToken {\n  static prim = 'chain_id';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(value: any): ChainIDValidationError | null {\n    if (validateChain(value) !== ValidationResult.VALID) {\n      return new ChainIDValidationError(value, this, 'ChainID is not valid');\n    }\n\n    return null;\n  }\n\n  public Execute(val: any): string {\n    return val[Object.keys(val)[0]];\n  }\n\n  public ExtractSchema() {\n    return ChainIDToken.prim;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: ChainIDToken.prim },\n    };\n  }\n}\n","import { PairToken } from './pair';\n\nimport { NatToken } from './comparable/nat';\n\nimport { StringToken } from './comparable/string';\n\nimport { BigMapToken } from './bigmap';\n\nimport { AddressToken } from './comparable/address';\n\nimport { MapToken } from './map';\n\nimport { BoolToken } from './comparable/bool';\n\nimport { OrToken } from './or';\n\nimport { ContractToken } from './contract';\n\nimport { ListToken } from './list';\nimport { MutezToken } from './comparable/mutez';\nimport { BytesToken } from './comparable/bytes';\nimport { OptionToken } from './option';\nimport { TimestampToken } from './comparable/timestamp';\nimport { IntToken } from './comparable/int';\nimport { UnitToken } from './unit';\nimport { KeyToken } from './key';\nimport { KeyHashToken } from './comparable/key_hash';\nimport { SignatureToken } from './signature';\nimport { LambdaToken } from './lambda';\nimport { OperationToken } from './operation';\nimport { SetToken } from './set';\nimport { ChainIDToken } from './chain-id';\n\nexport const tokens = [\n  PairToken,\n  NatToken,\n  StringToken,\n  BigMapToken,\n  AddressToken,\n  MapToken,\n  BoolToken,\n  OrToken,\n  ContractToken,\n  ListToken,\n  MutezToken,\n  BytesToken,\n  OptionToken,\n  TimestampToken,\n  IntToken,\n  UnitToken,\n  KeyToken,\n  KeyHashToken,\n  SignatureToken,\n  LambdaToken,\n  OperationToken,\n  SetToken,\n  ChainIDToken,\n];\n","import { tokens } from './tokens';\nimport { Token } from './token';\n\nexport class InvalidTokenError implements Error {\n  name: string = 'Invalid token error';\n  constructor(public message: string, public data: any) {}\n}\n\nexport function createToken(val: any, idx: number): Token {\n  const t = tokens.find(x => x.prim === val.prim);\n  if (!t) {\n    throw new InvalidTokenError('Malformed data expected a value with a valid prim property', val);\n  }\n  return new t(val, idx, createToken);\n}\n","import { MichelsonV1Expression, MichelsonV1ExpressionExtended, ScriptResponse } from '@taquito/rpc';\nimport { BigMapToken } from '../tokens/bigmap';\nimport { createToken } from '../tokens/createToken';\nimport { OrToken } from '../tokens/or';\nimport { PairToken } from '../tokens/pair';\nimport { Semantic, Token, TokenValidationError } from '../tokens/token';\nimport { RpcTransaction } from './model';\nimport { Falsy } from './types';\n\n/**\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\n */\nexport class Schema {\n  private root: Token;\n\n  // TODO: Should we deprecate this?\n  private bigMap?: BigMapToken;\n\n  static fromRPCResponse(val: { script: ScriptResponse }) {\n    const storage: Falsy<MichelsonV1ExpressionExtended> =\n      val &&\n      val.script &&\n      Array.isArray(val.script.code) &&\n      (val.script.code.find((x: any) => x.prim === 'storage') as MichelsonV1ExpressionExtended);\n\n    if (!storage || !Array.isArray(storage.args)) {\n      throw new Error('Invalid rpc response passed as arguments');\n    }\n\n    return new Schema(storage.args[0]);\n  }\n\n  private isExpressionExtended(\n    val: any\n  ): val is Required<Pick<MichelsonV1ExpressionExtended, 'prim' | 'args'>> {\n    return 'prim' in val && Array.isArray(val.args);\n  }\n\n  constructor(val: MichelsonV1Expression) {\n    this.root = createToken(val, 0);\n\n    if (this.root instanceof BigMapToken) {\n      this.bigMap = this.root;\n    } else if (this.isExpressionExtended(val) && val.prim === 'pair') {\n      const exp = val.args[0];\n      if (this.isExpressionExtended(exp) && exp.prim === 'big_map') {\n        this.bigMap = new BigMapToken(exp, 0, createToken);\n      }\n    }\n  }\n\n  private removeTopLevelAnnotation(obj: any) {\n    // PairToken and OrToken can have redundant top level annotation in their storage\n    if (this.root instanceof PairToken || this.root instanceof OrToken) {\n      if (this.root.hasAnnotations() && typeof obj === 'object' && Object.keys(obj).length === 1) {\n        return obj[Object.keys(obj)[0]];\n      }\n    }\n\n    return obj;\n  }\n\n  Execute(val: any, semantics?: Semantic) {\n    const storage = this.root.Execute(val, semantics);\n\n    return this.removeTopLevelAnnotation(storage);\n  }\n\n  ExecuteOnBigMapDiff(diff: any[], semantics?: Semantic) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    if (!Array.isArray(diff)) {\n      throw new Error('Invalid big map diff. It must be an array');\n    }\n\n    const eltFormat = diff.map(({ key, value }) => ({ args: [key, value] }));\n\n    return this.bigMap.Execute(eltFormat, semantics);\n  }\n\n  ExecuteOnBigMapValue(key: any, semantics?: Semantic) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    return this.bigMap.ValueSchema.Execute(key, semantics);\n  }\n\n  EncodeBigMapKey(key: string) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    try {\n      return this.bigMap.KeySchema.ToBigMapKey(key);\n    } catch (ex) {\n      throw new Error('Unable to encode big map key: ' + ex);\n    }\n  }\n\n  Encode(_value?: any) {\n    try {\n      return this.root.EncodeObject(_value);\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new Error(`Unable to encode storage object. ${ex}`);\n    }\n  }\n\n  ExtractSchema() {\n    return this.removeTopLevelAnnotation(this.root.ExtractSchema());\n  }\n\n  /**\n   * @deprecated\n   */\n  ComputeState(tx: RpcTransaction[], state: any) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    const bigMap = tx.reduce((prev, current) => {\n      return {\n        ...prev,\n        ...this.ExecuteOnBigMapDiff(current.contents[0].metadata.operation_result.big_map_diff),\n      };\n    }, {});\n\n    return {\n      ...this.Execute(state),\n      [this.bigMap.annot()]: bigMap,\n    };\n  }\n}\n","import { createToken } from '../tokens/createToken';\nimport { Token, Semantic, TokenValidationError } from '../tokens/token';\nimport { OrToken } from '../tokens/or';\nimport { OptionToken } from '../tokens/option';\nimport { ScriptResponse, MichelsonV1ExpressionExtended, MichelsonV1Expression } from '@taquito/rpc';\nimport { Falsy } from './types';\n\n/**\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\n */\nexport class ParameterSchema {\n  private root: Token;\n\n  static fromRPCResponse(val: { script: ScriptResponse }) {\n    const parameter: Falsy<MichelsonV1ExpressionExtended> =\n      val &&\n      val.script &&\n      Array.isArray(val.script.code) &&\n      (val.script.code.find((x: any) => x.prim === 'parameter') as MichelsonV1ExpressionExtended);\n    if (!parameter || !Array.isArray(parameter.args)) {\n      throw new Error('Invalid rpc response passed as arguments');\n    }\n\n    return new ParameterSchema(parameter.args[0]);\n  }\n\n  get isMultipleEntryPoint() {\n    return (\n      this.root instanceof OrToken ||\n      (this.root instanceof OptionToken && this.root.subToken() instanceof OrToken)\n    );\n  }\n\n  get hasAnnotation() {\n    if (this.isMultipleEntryPoint) {\n      return Object.keys(this.ExtractSchema())[0] !== '0';\n    } else {\n      return true;\n    }\n  }\n\n  constructor(val: MichelsonV1Expression) {\n    this.root = createToken(val, 0);\n  }\n\n  Execute(val: any, semantics?: Semantic) {\n    return this.root.Execute(val, semantics);\n  }\n\n  Encode(...args: any[]) {\n    try {\n      return this.root.Encode(args.reverse());\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new Error(`Unable to encode storage object. ${ex}`);\n    }\n  }\n\n  ExtractSchema() {\n    return this.root.ExtractSchema();\n  }\n\n  ExtractSignatures() {\n    return this.root.ExtractSignature();\n  }\n}\n"],"names":[],"mappings":"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"}